{"version":3,"file":"index.js","sources":["../node_modules/bignumber.js/bignumber.mjs","../build/compiled/bitcoin/constants.js","../build/compiled/bitcoin/network.js","../build/compiled/constants/error.js","../build/compiled/bitcoin/utils.js","../build/compiled/bitcoin/selectcoin.js","../build/compiled/bitcoin/wallet.js","../build/compiled/bitcoin/xverse.js","../build/compiled/bitcoin/tx.js","../build/compiled/bitcoin/psbt.js","../build/compiled/utils/validator.js","../build/compiled/tc/witness_stack_to_script_witness.js","../build/compiled/tc/inscribe.js","../build/compiled/tc/utils.js","../build/compiled/tc/tcclient.js"],"sourcesContent":["/*\r\n *      bignumber.js v9.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var n,\r\n      i = 1,\r\n      m = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n","import BigNumber from \"bignumber.js\";\nconst BlockStreamURL = \"https://blockstream.info/api\";\nconst MinSats = 1000;\nconst DummyUTXOValue = 1000;\nconst InputSize = 68;\nconst OutputSize = 43;\nconst BNZero = new BigNumber(0);\nconst WalletType = {\n    Xverse: 1,\n    Hiro: 2,\n};\nexport { BlockStreamURL, MinSats, DummyUTXOValue, InputSize, OutputSize, BNZero, WalletType, };\n//# sourceMappingURL=constants.js.map","import { networks } from \"bitcoinjs-lib\";\n// default is bitcoin mainnet\nlet Network = networks.bitcoin;\nconst NetworkType = {\n    Mainnet: 1,\n    Testnet: 2,\n    Regtest: 3,\n};\nconst setBTCNetwork = (netType) => {\n    switch (netType) {\n        case NetworkType.Mainnet: {\n            Network = networks.bitcoin;\n            break;\n        }\n        case NetworkType.Testnet: {\n            Network = networks.testnet;\n            break;\n        }\n        case NetworkType.Regtest: {\n            Network = networks.regtest;\n            break;\n        }\n    }\n};\nexport { Network, NetworkType, setBTCNetwork, };\n//# sourceMappingURL=network.js.map","export const ERROR_CODE = {\n    INVALID_CODE: \"0\",\n    INVALID_PARAMS: \"-1\",\n    NOT_SUPPORT_SEND: \"-2\",\n    NOT_FOUND_INSCRIPTION: \"-3\",\n    NOT_ENOUGH_BTC_TO_SEND: \"-4\",\n    NOT_ENOUGH_BTC_TO_PAY_FEE: \"-5\",\n    ERR_BROADCAST_TX: \"-6\",\n    INVALID_SIG: \"-7\",\n    INVALID_VALIDATOR_LABEL: \"-8\",\n    NOT_FOUND_UTXO: \"-9\",\n    NOT_FOUND_DUMMY_UTXO: \"-10\",\n    WALLET_NOT_SUPPORT: \"-11\",\n    SIGN_XVERSE_ERROR: \"-12\",\n    CREATE_COMMIT_TX_ERR: \"-13\",\n    INVALID_TAPSCRIPT_ADDRESS: \"-14\",\n    INVALID_NETWORK_TYPE: \"-15\",\n    RPC_ERROR: \"-16\",\n    RPC_GET_INSCRIBEABLE_INFO_ERROR: \"-17\",\n    RPC_SUBMIT_BTCTX_ERROR: \"-18\",\n    RPC_GET_TAPSCRIPT_INFO: \"-19\",\n};\nexport const ERROR_MESSAGE = {\n    [ERROR_CODE.INVALID_CODE]: {\n        message: \"Something went wrong.\",\n        desc: \"Something went wrong.\",\n    },\n    [ERROR_CODE.INVALID_PARAMS]: {\n        message: \"Invalid input params.\",\n        desc: \"Invalid input params.\",\n    },\n    [ERROR_CODE.NOT_SUPPORT_SEND]: {\n        message: \"This inscription is not supported to send.\",\n        desc: \"This inscription is not supported to send.\",\n    },\n    [ERROR_CODE.NOT_FOUND_INSCRIPTION]: {\n        message: \"Can not find inscription UTXO in your wallet.\",\n        desc: \"Can not find inscription UTXO in your wallet.\",\n    },\n    [ERROR_CODE.NOT_ENOUGH_BTC_TO_SEND]: {\n        message: \"Your balance is insufficient. Please top up BTC to your wallet.\",\n        desc: \"Your balance is insufficient. Please top up BTC to your wallet.\",\n    },\n    [ERROR_CODE.NOT_ENOUGH_BTC_TO_PAY_FEE]: {\n        message: \"Your balance is insufficient. Please top up BTC to pay network fee.\",\n        desc: \"Your balance is insufficient. Please top up BTC to pay network fee.\",\n    },\n    [ERROR_CODE.ERR_BROADCAST_TX]: {\n        message: \"There was an issue when broadcasting the transaction to the BTC network.\",\n        desc: \"There was an issue when broadcasting the transaction to the BTC network.\",\n    },\n    [ERROR_CODE.INVALID_SIG]: {\n        message: \"Signature is invalid in the partially signed bitcoin transaction.\",\n        desc: \"Signature is invalid in the partially signed bitcoin transaction.\",\n    },\n    [ERROR_CODE.INVALID_VALIDATOR_LABEL]: {\n        message: \"Missing or invalid label.\",\n        desc: \"Missing or invalid label.\",\n    },\n    [ERROR_CODE.NOT_FOUND_UTXO]: {\n        message: \"Can not find UTXO with exact value.\",\n        desc: \"Can not find UTXO with exact value.\",\n    },\n    [ERROR_CODE.NOT_FOUND_DUMMY_UTXO]: {\n        message: \"Can not find dummy UTXO in your wallet.\",\n        desc: \"Can not find dummy UTXO in your wallet.\",\n    },\n    [ERROR_CODE.SIGN_XVERSE_ERROR]: {\n        message: \"Can not sign with Xverse.\",\n        desc: \"Can not sign with Xverse.\",\n    },\n    [ERROR_CODE.WALLET_NOT_SUPPORT]: {\n        message: \"Your wallet is not supported currently.\",\n        desc: \"Your wallet is not supported currently.\",\n    },\n    [ERROR_CODE.CREATE_COMMIT_TX_ERR]: {\n        message: \"Create commit tx error.\",\n        desc: \"Create commit tx error.\",\n    },\n    [ERROR_CODE.INVALID_TAPSCRIPT_ADDRESS]: {\n        message: \"Can not generate valid tap script address to inscribe.\",\n        desc: \"Can not generate valid tap script address to inscribe.\",\n    },\n    [ERROR_CODE.INVALID_NETWORK_TYPE]: {\n        message: \"Invalid network type params.\",\n        desc: \"Invalid network type params.\",\n    },\n    [ERROR_CODE.RPC_ERROR]: {\n        message: \"Call RPC TC node error.\",\n        desc: \"Call RPC TC node error.\",\n    },\n    [ERROR_CODE.RPC_GET_INSCRIBEABLE_INFO_ERROR]: {\n        message: \"Call RPC get inscribeable info error.\",\n        desc: \"Call RPC get inscribeable info error.\",\n    },\n    [ERROR_CODE.RPC_SUBMIT_BTCTX_ERROR]: {\n        message: \"Call RPC submit btc tx error.\",\n        desc: \"Call RPC submit btc tx error.\",\n    },\n};\nclass SDKError extends Error {\n    constructor(code, desc) {\n        super();\n        const _error = ERROR_MESSAGE[code];\n        this.message = `${_error.message} (${code})` || \"\";\n        this.code = code;\n        this.desc = desc || (_error === null || _error === void 0 ? void 0 : _error.desc);\n    }\n    getMessage() {\n        return this.message;\n    }\n}\nexport default SDKError;\n//# sourceMappingURL=error.js.map","import { BNZero } from \"./constants\";\n/**\n* estimateTxFee estimates the transaction fee\n* @param numIns number of inputs in the transaction\n* @param numOuts number of outputs in the transaction\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @returns returns the estimated transaction fee in satoshi\n*/\nconst estimateTxFee = (numIns, numOuts, feeRatePerByte) => {\n    const fee = (68 * numIns + 43 * numOuts) * feeRatePerByte;\n    return fee;\n};\n/**\n* estimateNumInOutputs estimates number of inputs and outputs by parameters:\n* @param inscriptionID id of inscription to send (if any)\n* @param sendAmount satoshi amount need to send\n* @param isUseInscriptionPayFee use inscription output coin to pay fee or not\n* @returns returns the estimated number of inputs and outputs in the transaction\n*/\nconst estimateNumInOutputs = (inscriptionID, sendAmount, isUseInscriptionPayFee) => {\n    let numOuts = 0;\n    let numIns = 0;\n    if (inscriptionID !== \"\") {\n        numOuts++;\n        numIns++;\n    }\n    if (sendAmount.gt(BNZero)) {\n        numOuts++;\n    }\n    if (sendAmount.gt(BNZero) || !isUseInscriptionPayFee) {\n        numIns++;\n        numOuts++; // for change BTC output\n    }\n    return { numIns, numOuts };\n};\n/**\n* estimateNumInOutputs estimates number of inputs and outputs by parameters:\n* @param inscriptionID id of inscription to send (if any)\n* @param sendAmount satoshi amount need to send\n* @param isUseInscriptionPayFee use inscription output coin to pay fee or not\n* @returns returns the estimated number of inputs and outputs in the transaction\n*/\nconst estimateNumInOutputsForBuyInscription = (estNumInputsFromBuyer, estNumOutputsFromBuyer, sellerSignedPsbt) => {\n    const numIns = sellerSignedPsbt.txInputs.length + estNumInputsFromBuyer;\n    const numOuts = sellerSignedPsbt.txOutputs.length + estNumOutputsFromBuyer;\n    return { numIns, numOuts };\n};\nconst fromSat = (sat) => {\n    return sat / 1e8;\n};\nconst toSat = (value) => {\n    return Math.round(value * 1e8);\n};\nexport { estimateTxFee, estimateNumInOutputs, estimateNumInOutputsForBuyInscription, fromSat, toSat, };\n//# sourceMappingURL=utils.js.map","import { MinSats, BNZero } from \"./constants\";\nimport SDKError, { ERROR_CODE } from \"../constants/error\";\nimport BigNumber from \"bignumber.js\";\nimport { estimateTxFee, estimateNumInOutputs, estimateNumInOutputsForBuyInscription } from \"./utils\";\n/**\n* selectUTXOs selects the most reasonable UTXOs to create the transaction.\n* if sending inscription, the first selected UTXO is always the UTXO contain inscription.\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the list of selected UTXOs\n* @returns the actual flag using inscription coin to pay fee\n* @returns the value of inscription outputs, and the change amount (if any)\n* @returns the network fee\n*/\nconst selectUTXOs = (utxos, inscriptions, sendInscriptionID, sendAmount, feeRatePerByte, isUseInscriptionPayFee) => {\n    const resultUTXOs = [];\n    let normalUTXOs = [];\n    let inscriptionUTXO = null;\n    let inscriptionInfo = null;\n    let valueOutInscription = BNZero;\n    let changeAmount = BNZero;\n    let maxAmountInsTransfer = BNZero;\n    // convert feeRate to interger\n    feeRatePerByte = Math.round(feeRatePerByte);\n    // estimate fee\n    const { numIns, numOuts } = estimateNumInOutputs(sendInscriptionID, sendAmount, isUseInscriptionPayFee);\n    const estFee = new BigNumber(estimateTxFee(numIns, numOuts, feeRatePerByte));\n    // when BTC amount need to send is greater than 0, \n    // we should use normal BTC to pay fee\n    if (isUseInscriptionPayFee && sendAmount.gt(BNZero)) {\n        isUseInscriptionPayFee = false;\n    }\n    // filter normal UTXO and inscription UTXO to send\n    const { cardinalUTXOs, inscriptionUTXOs } = filterAndSortCardinalUTXOs(utxos, inscriptions);\n    normalUTXOs = cardinalUTXOs;\n    if (sendInscriptionID !== \"\") {\n        const res = selectInscriptionUTXO(inscriptionUTXOs, inscriptions, sendInscriptionID);\n        inscriptionUTXO = res.inscriptionUTXO;\n        inscriptionInfo = res.inscriptionInfo;\n        // maxAmountInsTransfer = (inscriptionUTXO.value - inscriptionInfo.offset - 1) - MinSats;\n        maxAmountInsTransfer = inscriptionUTXO.value.\n            minus(inscriptionInfo.offset).\n            minus(1).minus(MinSats);\n        console.log(\"maxAmountInsTransfer: \", maxAmountInsTransfer.toNumber());\n    }\n    if (sendInscriptionID !== \"\") {\n        if (inscriptionUTXO === null || inscriptionInfo == null) {\n            throw new SDKError(ERROR_CODE.NOT_FOUND_INSCRIPTION);\n        }\n        // if value is not enough to pay fee, MUST use normal UTXOs to pay fee\n        if (isUseInscriptionPayFee && maxAmountInsTransfer.lt(estFee)) {\n            isUseInscriptionPayFee = false;\n        }\n        // push inscription UTXO to create tx\n        resultUTXOs.push(inscriptionUTXO);\n    }\n    // select normal UTXOs\n    let totalSendAmount = sendAmount;\n    if (!isUseInscriptionPayFee) {\n        totalSendAmount = totalSendAmount.plus(estFee);\n    }\n    let totalInputAmount = BNZero;\n    if (totalSendAmount.gt(BNZero)) {\n        if (normalUTXOs.length === 0) {\n            throw new SDKError(ERROR_CODE.NOT_ENOUGH_BTC_TO_SEND);\n        }\n        if (normalUTXOs[normalUTXOs.length - 1].value.gte(totalSendAmount)) {\n            // select the smallest utxo\n            resultUTXOs.push(normalUTXOs[normalUTXOs.length - 1]);\n            totalInputAmount = normalUTXOs[normalUTXOs.length - 1].value;\n        }\n        else if (normalUTXOs[0].value.lt(totalSendAmount)) {\n            // select multiple UTXOs\n            for (let i = 0; i < normalUTXOs.length; i++) {\n                const utxo = normalUTXOs[i];\n                resultUTXOs.push(utxo);\n                totalInputAmount = totalInputAmount.plus(utxo.value);\n                if (totalInputAmount.gte(totalSendAmount)) {\n                    break;\n                }\n            }\n            if (totalInputAmount.lt(totalSendAmount)) {\n                throw new SDKError(ERROR_CODE.NOT_ENOUGH_BTC_TO_SEND);\n            }\n        }\n        else {\n            // select the nearest UTXO\n            let selectedUTXO = normalUTXOs[0];\n            for (let i = 1; i < normalUTXOs.length; i++) {\n                if (normalUTXOs[i].value.lt(totalSendAmount)) {\n                    resultUTXOs.push(selectedUTXO);\n                    totalInputAmount = selectedUTXO.value;\n                    break;\n                }\n                selectedUTXO = normalUTXOs[i];\n            }\n        }\n    }\n    // re-estimate fee with exact number of inputs and outputs\n    const { numOuts: reNumOuts } = estimateNumInOutputs(sendInscriptionID, sendAmount, isUseInscriptionPayFee);\n    let feeRes = new BigNumber(estimateTxFee(resultUTXOs.length, reNumOuts, feeRatePerByte));\n    // calculate output amount\n    if (isUseInscriptionPayFee) {\n        if (maxAmountInsTransfer.lt(feeRes)) {\n            feeRes = maxAmountInsTransfer;\n        }\n        valueOutInscription = inscriptionUTXO.value.minus(feeRes);\n        changeAmount = totalInputAmount.minus(sendAmount);\n    }\n    else {\n        if (totalInputAmount.lt(sendAmount.plus(feeRes))) {\n            feeRes = totalInputAmount.minus(sendAmount);\n        }\n        valueOutInscription = (inscriptionUTXO === null || inscriptionUTXO === void 0 ? void 0 : inscriptionUTXO.value) || BNZero;\n        changeAmount = totalInputAmount.minus(sendAmount).minus(feeRes);\n    }\n    return { selectedUTXOs: resultUTXOs, isUseInscriptionPayFee: isUseInscriptionPayFee, valueOutInscription: valueOutInscription, changeAmount: changeAmount, fee: feeRes };\n};\n/**\n* selectUTXOs selects the most reasonable UTXOs to create the transaction.\n* if sending inscription, the first selected UTXO is always the UTXO contain inscription.\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @returns the ordinal UTXO\n* @returns the actual flag using inscription coin to pay fee\n* @returns the value of inscription outputs, and the change amount (if any)\n* @returns the network fee\n*/\nconst selectInscriptionUTXO = (utxos, inscriptions, inscriptionID) => {\n    if (inscriptionID === \"\") {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"InscriptionID must not be an empty string\");\n    }\n    // filter normal UTXO and inscription UTXO to send\n    for (const utxo of utxos) {\n        // txIDKey = tx_hash:tx_output_n\n        let txIDKey = utxo.tx_hash.concat(\":\");\n        txIDKey = txIDKey.concat(utxo.tx_output_n.toString());\n        // try to get inscriptionInfos\n        const inscriptionInfos = inscriptions[txIDKey];\n        if (inscriptionInfos !== undefined && inscriptionInfos !== null && inscriptionInfos.length > 0) {\n            const inscription = inscriptionInfos.find(ins => ins.id === inscriptionID);\n            if (inscription !== undefined) {\n                // don't support send tx with outcoin that includes more than one inscription\n                if (inscriptionInfos.length > 1) {\n                    throw new SDKError(ERROR_CODE.NOT_SUPPORT_SEND);\n                }\n                return { inscriptionUTXO: utxo, inscriptionInfo: inscription };\n            }\n        }\n    }\n    throw new SDKError(ERROR_CODE.NOT_FOUND_INSCRIPTION);\n};\n/**\n* selectCardinalUTXOs selects the most reasonable UTXOs to create the transaction.\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendAmount satoshi amount need to send\n* @returns the list of selected UTXOs\n* @returns the actual flag using inscription coin to pay fee\n* @returns the value of inscription outputs, and the change amount (if any)\n* @returns the network fee\n*/\nconst selectCardinalUTXOs = (utxos, inscriptions, sendAmount) => {\n    const resultUTXOs = [];\n    let remainUTXOs = [];\n    // filter normal UTXO and inscription UTXO to send\n    const { cardinalUTXOs: normalUTXOs } = filterAndSortCardinalUTXOs(utxos, inscriptions);\n    let totalInputAmount = BNZero;\n    const cloneUTXOs = [...normalUTXOs];\n    const totalSendAmount = sendAmount;\n    if (totalSendAmount.gt(BNZero)) {\n        if (normalUTXOs.length === 0) {\n            throw new SDKError(ERROR_CODE.NOT_ENOUGH_BTC_TO_SEND);\n        }\n        if (normalUTXOs[normalUTXOs.length - 1].value.gte(totalSendAmount)) {\n            // select the smallest utxo\n            resultUTXOs.push(normalUTXOs[normalUTXOs.length - 1]);\n            totalInputAmount = normalUTXOs[normalUTXOs.length - 1].value;\n            remainUTXOs = cloneUTXOs.splice(0, normalUTXOs.length - 1);\n        }\n        else if (normalUTXOs[0].value.lt(totalSendAmount)) {\n            // select multiple UTXOs\n            for (let i = 0; i < normalUTXOs.length; i++) {\n                const utxo = normalUTXOs[i];\n                resultUTXOs.push(utxo);\n                totalInputAmount = totalInputAmount.plus(utxo.value);\n                if (totalInputAmount.gte(totalSendAmount)) {\n                    remainUTXOs = cloneUTXOs.splice(i + 1, normalUTXOs.length - i - 1);\n                    break;\n                }\n            }\n            if (totalInputAmount.lt(totalSendAmount)) {\n                throw new SDKError(ERROR_CODE.NOT_ENOUGH_BTC_TO_SEND);\n            }\n        }\n        else {\n            // select the nearest UTXO\n            let selectedUTXO = normalUTXOs[0];\n            let selectedIndex = 0;\n            for (let i = 1; i < normalUTXOs.length; i++) {\n                if (normalUTXOs[i].value.lt(totalSendAmount)) {\n                    resultUTXOs.push(selectedUTXO);\n                    totalInputAmount = selectedUTXO.value;\n                    remainUTXOs = [...cloneUTXOs];\n                    remainUTXOs.splice(selectedIndex, 1);\n                    break;\n                }\n                selectedUTXO = normalUTXOs[i];\n                selectedIndex = i;\n            }\n        }\n    }\n    return { selectedUTXOs: resultUTXOs, remainUTXOs, totalInputAmount };\n};\nconst selectUTXOsToCreateBuyTx = (params) => {\n    const { sellerSignedPsbt, price, utxos, inscriptions, feeRate } = params;\n    // estimate network fee\n    const { numIns, numOuts } = estimateNumInOutputsForBuyInscription(3, 3, sellerSignedPsbt);\n    const estTotalPaymentAmount = price.plus(new BigNumber(estimateTxFee(numIns, numOuts, feeRate)));\n    const { selectedUTXOs, remainUTXOs, totalInputAmount } = selectCardinalUTXOs(utxos, inscriptions, estTotalPaymentAmount);\n    let paymentUTXOs = selectedUTXOs;\n    // re-estimate network fee\n    const { numIns: finalNumIns, numOuts: finalNumOuts } = estimateNumInOutputsForBuyInscription(paymentUTXOs.length, 3, sellerSignedPsbt);\n    const finalTotalPaymentAmount = price.plus(new BigNumber(estimateTxFee(finalNumIns, finalNumOuts, feeRate)));\n    if (finalTotalPaymentAmount > totalInputAmount) {\n        // need to select extra UTXOs\n        const { selectedUTXOs: extraUTXOs } = selectCardinalUTXOs(remainUTXOs, {}, finalTotalPaymentAmount.minus(totalInputAmount));\n        paymentUTXOs = paymentUTXOs.concat(extraUTXOs);\n    }\n    return { selectedUTXOs: paymentUTXOs };\n};\n/**\n* selectTheSmallestUTXO selects the most reasonable UTXOs to create the transaction.\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendAmount satoshi amount need to send\n* @param isSelectDummyUTXO need to select dummy UTXO or not\n* @returns the list of selected UTXOs\n* @returns the actual flag using inscription coin to pay fee\n* @returns the value of inscription outputs, and the change amount (if any)\n* @returns the network fee\n*/\nconst selectTheSmallestUTXO = (utxos, inscriptions) => {\n    const { cardinalUTXOs } = filterAndSortCardinalUTXOs(utxos, inscriptions);\n    if (cardinalUTXOs.length === 0) {\n        throw new SDKError(ERROR_CODE.NOT_ENOUGH_BTC_TO_SEND);\n    }\n    return cardinalUTXOs[cardinalUTXOs.length - 1];\n};\n/**\n* filterAndSortCardinalUTXOs filter cardinal utxos and inscription utxos.\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @returns the list of cardinal UTXOs which is sorted descending by value\n* @returns the list of inscription UTXOs\n* @returns total amount of cardinal UTXOs\n*/\nconst filterAndSortCardinalUTXOs = (utxos, inscriptions) => {\n    let cardinalUTXOs = [];\n    const inscriptionUTXOs = [];\n    let totalCardinalAmount = BNZero;\n    // filter normal UTXO and inscription UTXO to send\n    for (const utxo of utxos) {\n        // txIDKey = tx_hash:tx_output_n\n        let txIDKey = utxo.tx_hash.concat(\":\");\n        txIDKey = txIDKey.concat(utxo.tx_output_n.toString());\n        // try to get inscriptionInfos\n        const inscriptionInfos = inscriptions[txIDKey];\n        if (inscriptionInfos === undefined || inscriptionInfos === null || inscriptionInfos.length == 0) {\n            // normal UTXO\n            cardinalUTXOs.push(utxo);\n            totalCardinalAmount = totalCardinalAmount.plus(utxo.value);\n        }\n        else {\n            inscriptionUTXOs.push(utxo);\n        }\n    }\n    cardinalUTXOs = cardinalUTXOs.sort((a, b) => {\n        if (a.value.gt(b.value)) {\n            return -1;\n        }\n        if (a.value.lt(b.value)) {\n            return 1;\n        }\n        return 0;\n    });\n    return { cardinalUTXOs, inscriptionUTXOs, totalCardinalAmount };\n};\n/**\n* findExactValueUTXO returns the cardinal utxos with exact value.\n* @param cardinalUTXOs list of utxos (only non-inscription  utxos)\n* @param value value of utxo\n* @returns the cardinal UTXO\n*/\nconst findExactValueUTXO = (cardinalUTXOs, value) => {\n    for (const utxo of cardinalUTXOs) {\n        if (utxo.value.eq(value)) {\n            return { utxo };\n        }\n    }\n    throw new SDKError(ERROR_CODE.NOT_FOUND_UTXO, value.toString());\n};\nexport { selectUTXOs, selectInscriptionUTXO, selectCardinalUTXOs, selectTheSmallestUTXO, selectUTXOsToCreateBuyTx, findExactValueUTXO, filterAndSortCardinalUTXOs, };\n//# sourceMappingURL=selectcoin.js.map","import * as ecc from \"@bitcoinerlab/secp256k1\";\nimport { AES, enc } from \"crypto-js\";\nimport { ECPairFactory } from \"ecpair\";\nimport { crypto, initEccLib, payments } from \"bitcoinjs-lib\";\nimport { ethers, utils } from \"ethers\";\nimport BIP32Factory from \"bip32\";\nimport { Network } from \"./network\";\nimport Web3 from \"web3\";\nimport { filterAndSortCardinalUTXOs } from \"./selectcoin\";\nimport { hdkey } from \"ethereumjs-wallet\";\nimport { keccak256 } from \"js-sha3\";\nimport wif from \"wif\";\ninitEccLib(ecc);\nconst ECPair = ECPairFactory(ecc);\nconst bip32 = BIP32Factory(ecc);\nconst ETHWalletDefaultPath = \"m/44'/60'/0'/0/0\";\nconst BTCSegwitWalletDefaultPath = \"m/84'/0'/0'/0/0\";\n/**\n* convertPrivateKey converts buffer private key to WIF private key string\n* @param bytes buffer private key\n* @returns the WIF private key string\n*/\nconst convertPrivateKey = (bytes) => {\n    return wif.encode(128, bytes, true);\n};\n/**\n* convertPrivateKeyFromStr converts private key WIF string to Buffer\n* @param str private key string\n* @returns buffer private key\n*/\nconst convertPrivateKeyFromStr = (str) => {\n    const res = wif.decode(str);\n    return res === null || res === void 0 ? void 0 : res.privateKey;\n};\nfunction toXOnly(pubkey) {\n    if (pubkey.length === 33) {\n        return pubkey.subarray(1, 33);\n    }\n    return pubkey;\n}\nfunction tweakSigner(signer, opts = {}) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    let privateKey = signer.privateKey;\n    if (!privateKey) {\n        throw new Error(\"Private key is required for tweaking signer!\");\n    }\n    if (signer.publicKey[0] === 3) {\n        privateKey = ecc.privateNegate(privateKey);\n    }\n    const tweakedPrivateKey = ecc.privateAdd(privateKey, tapTweakHash(toXOnly(signer.publicKey), opts.tweakHash));\n    if (!tweakedPrivateKey) {\n        throw new Error(\"Invalid tweaked private key!\");\n    }\n    return ECPair.fromPrivateKey(Buffer.from(tweakedPrivateKey), {\n        network: opts.network,\n    });\n}\nfunction tapTweakHash(pubKey, h) {\n    return crypto.taggedHash(\"TapTweak\", Buffer.concat(h ? [pubKey, h] : [pubKey]));\n}\nconst generateTaprootAddress = (privateKey) => {\n    const keyPair = ECPair.fromPrivateKey(privateKey, { network: Network });\n    const internalPubkey = toXOnly(keyPair.publicKey);\n    const { address } = payments.p2tr({\n        internalPubkey,\n        network: Network,\n    });\n    return address ? address : \"\";\n};\nconst generateTaprootAddressFromPubKey = (pubKey) => {\n    // const internalPubkey = toXOnly(pubKey);\n    const internalPubkey = pubKey;\n    const p2pktr = payments.p2tr({\n        internalPubkey,\n        network: Network,\n    });\n    return { address: p2pktr.address || \"\", p2pktr };\n};\nconst generateTaprootKeyPair = (privateKey) => {\n    // init key pair from senderPrivateKey\n    const keyPair = ECPair.fromPrivateKey(privateKey, { network: Network });\n    // Tweak the original keypair\n    const tweakedSigner = tweakSigner(keyPair, { network: Network });\n    // Generate an address from the tweaked public key\n    const p2pktr = payments.p2tr({\n        pubkey: toXOnly(tweakedSigner.publicKey),\n        network: Network\n    });\n    const senderAddress = p2pktr.address ? p2pktr.address : \"\";\n    if (senderAddress === \"\") {\n        throw new Error(\"Can not get sender address from private key\");\n    }\n    return { keyPair, senderAddress, tweakedSigner, p2pktr };\n};\nconst generateP2PKHKeyPair = (privateKey) => {\n    // init key pair from senderPrivateKey\n    const keyPair = ECPair.fromPrivateKey(privateKey, { network: Network });\n    // Generate an address from the tweaked public key\n    const p2pkh = payments.p2pkh({\n        pubkey: keyPair.publicKey,\n        network: Network\n    });\n    const address = p2pkh.address ? p2pkh.address : \"\";\n    if (address === \"\") {\n        throw new Error(\"Can not get sender address from private key\");\n    }\n    return { keyPair, address, p2pkh: p2pkh, privateKey };\n};\nconst generateP2PKHKeyFromRoot = (root) => {\n    const childSegwit = root.derivePath(BTCSegwitWalletDefaultPath);\n    const privateKey = childSegwit.privateKey;\n    return generateP2PKHKeyPair(privateKey);\n};\n/**\n* getBTCBalance returns the Bitcoin balance from cardinal utxos.\n*/\nconst getBTCBalance = (params) => {\n    const { utxos, inscriptions } = params;\n    const { totalCardinalAmount } = filterAndSortCardinalUTXOs(utxos, inscriptions);\n    return totalCardinalAmount;\n};\n/**\n* importBTCPrivateKey returns the bitcoin private key and the corresponding taproot address.\n*/\nconst importBTCPrivateKey = (wifPrivKey) => {\n    const privKeyBuffer = convertPrivateKeyFromStr(wifPrivKey);\n    const { senderAddress } = generateTaprootKeyPair(privKeyBuffer);\n    return {\n        taprootPrivKeyBuffer: privKeyBuffer,\n        taprootAddress: senderAddress,\n    };\n};\n/**\n* deriveSegwitWallet derives bitcoin segwit wallet from private key taproot.\n* @param privKeyTaproot private key taproot is used to a seed to generate segwit wall\n* @returns the segwit private key and the segwit address\n*/\nconst deriveSegwitWallet = (privKeyTaproot) => {\n    const seedSegwit = ethers.utils.arrayify(ethers.utils.keccak256(ethers.utils.arrayify(privKeyTaproot)));\n    const root = bip32.fromSeed(Buffer.from(seedSegwit), Network);\n    const { privateKey: segwitPrivKey, address: segwitAddress } = generateP2PKHKeyFromRoot(root);\n    return {\n        segwitPrivKeyBuffer: segwitPrivKey,\n        segwitAddress: segwitAddress,\n    };\n};\n/**\n* deriveETHWallet derives eth wallet from private key taproot.\n* @param privKeyTaproot private key taproot is used to a seed to generate eth wallet\n* @returns the eth private key and the eth address\n*/\nconst deriveETHWallet = (privKeyTaproot) => {\n    const seed = ethers.utils.arrayify(ethers.utils.keccak256(ethers.utils.arrayify(privKeyTaproot)));\n    const hdwallet = hdkey.fromMasterSeed(Buffer.from(seed));\n    const ethWallet = hdwallet.derivePath(ETHWalletDefaultPath).getWallet();\n    return {\n        ethPrivKey: ethWallet.getPrivateKeyString(),\n        ethAddress: ethWallet.getAddressString(),\n    };\n};\n/**\n* signByETHPrivKey creates the signature on the data by ethPrivKey.\n* @param ethPrivKey private key with either prefix \"0x\" or non-prefix\n* @param data data toSign is a hex string, MUST hash prefix \"0x\"\n* @returns the signature with prefix \"0x\"\n*/\nconst signByETHPrivKey = (ethPrivKey, data) => {\n    const web3 = new Web3();\n    const { signature, } = web3.eth.accounts.sign(data, ethPrivKey);\n    return signature;\n};\nconst getBitcoinKeySignContent = (message) => {\n    return Buffer.from(message);\n};\n/**\n* derivePasswordWallet derive the password from ONE SPECIFIC evm address.\n* This password is used to encrypt and decrypt the imported BTC wallet.\n* NOTE: The client should save the corresponding evm address to retrieve the same BTC wallet.\n* @param provider ETH provider\n* @param evmAddress evm address is chosen to create the valid signature on IMPORT_MESSAGE\n* @returns the password string\n*/\nconst derivePasswordWallet = async (evmAddress, provider) => {\n    // sign message with first sign transaction\n    const IMPORT_MESSAGE = \"Sign this message to import your Bitcoin wallet. This key will be used to encrypt your wallet.\";\n    const toSign = \"0x\" + getBitcoinKeySignContent(IMPORT_MESSAGE).toString(\"hex\");\n    const signature = await provider.send(\"personal_sign\", [\n        toSign,\n        evmAddress.toString(),\n    ]);\n    // const signature = randomBytes(64);\n    const password = keccak256(utils.arrayify(signature));\n    return password;\n};\n/**\n* encryptWallet encrypts Wallet object by AES algorithm.\n* @param wallet includes the plaintext private key need to encrypt\n* @param password the password to encrypt\n* @returns the signature with prefix \"0x\"\n*/\nconst encryptWallet = (wallet, password) => {\n    // convert wallet to string\n    const walletStr = JSON.stringify(wallet);\n    const ciphertext = AES.encrypt(walletStr, password).toString();\n    return ciphertext;\n};\n/**\n* decryptWallet decrypts ciphertext to Wallet object by AES algorithm.\n* @param ciphertext ciphertext\n* @param password the password to decrypt\n* @returns the Wallet object\n*/\nconst decryptWallet = (ciphertext, password) => {\n    const plaintextBytes = AES.decrypt(ciphertext, password);\n    // parse to wallet object\n    const wallet = JSON.parse(plaintextBytes.toString(enc.Utf8));\n    return wallet;\n};\nexport { ECPair, convertPrivateKey, convertPrivateKeyFromStr, toXOnly, tweakSigner, tapTweakHash, generateTaprootAddress, generateTaprootKeyPair, generateP2PKHKeyPair, generateP2PKHKeyFromRoot, getBTCBalance, importBTCPrivateKey, derivePasswordWallet, getBitcoinKeySignContent, encryptWallet, decryptWallet, deriveSegwitWallet, deriveETHWallet, signByETHPrivKey, generateTaprootAddressFromPubKey, };\n//# sourceMappingURL=wallet.js.map","import { Psbt, Transaction } from \"bitcoinjs-lib\";\nimport { signTransaction, } from \"sats-connect\";\nimport { ERROR_CODE } from \"../constants/error\";\nimport SDKError from \"../constants/error\";\nimport { WalletType } from \"./constants\";\nconst preparePayloadSignTx = ({ base64Psbt, indicesToSign, address, sigHashType = Transaction.SIGHASH_DEFAULT }) => {\n    return {\n        network: {\n            type: \"Mainnet\",\n            address: \"\", // TODO:\n        },\n        message: \"Sign Transaction\",\n        psbtBase64: base64Psbt,\n        broadcast: false,\n        inputsToSign: [{\n                address: address,\n                signingIndexes: indicesToSign,\n                sigHash: sigHashType,\n            }],\n    };\n};\nconst finalizeSignedPsbt = ({ signedRawPsbtB64, indicesToSign, }) => {\n    const signedPsbt = Psbt.fromBase64(signedRawPsbtB64);\n    // finalize inputs\n    for (let i = 0; i < signedPsbt.txInputs.length; i++) {\n        if (indicesToSign.findIndex(value => value === i) !== -1) {\n            signedPsbt.finalizeInput(i);\n        }\n    }\n    return signedPsbt;\n};\n/**\n* handleSignPsbtWithXverse calls Xverse signTransaction and finalizes signed raw psbt.\n* extract to msgTx (if isGetMsgTx is true)\n* @param base64Psbt the base64 encoded psbt need to sign\n* @param indicesToSign indices of inputs need to sign\n* @param address address of signer\n* @param sigHashType default is SIGHASH_DEFAULT\n* @param isGetMsgTx flag used to extract to msgTx or not\n* @param cancelFn callback function for handling cancel signing\n* @returns the base64 encode signed Psbt\n*/\nconst handleSignPsbtWithXverse = async ({ base64Psbt, indicesToSign, address, sigHashType = Transaction.SIGHASH_DEFAULT, isGetMsgTx = false, cancelFn, }) => {\n    let base64SignedPsbt = \"\";\n    const payload = preparePayloadSignTx({\n        base64Psbt,\n        indicesToSign, address,\n        sigHashType\n    });\n    const signPsbtOptions = {\n        payload: payload,\n        onFinish: (response) => {\n            console.log(\"Sign Xverse response: \", response);\n            if (response.psbtBase64 !== null && response.psbtBase64 !== undefined && response.psbtBase64 !== \"\") {\n                // sign successfully\n                base64SignedPsbt = response.psbtBase64;\n            }\n            else {\n                // sign unsuccessfully\n                throw new SDKError(ERROR_CODE.SIGN_XVERSE_ERROR, response);\n            }\n        },\n        onCancel: cancelFn,\n    };\n    await signTransaction(signPsbtOptions);\n    if (base64SignedPsbt === \"\") {\n        throw new SDKError(ERROR_CODE.SIGN_XVERSE_ERROR, \"Response is empty\");\n    }\n    const finalizedPsbt = finalizeSignedPsbt({ signedRawPsbtB64: base64SignedPsbt, indicesToSign });\n    let msgTx;\n    let msgTxID = \"\";\n    let msgTxHex = \"\";\n    if (isGetMsgTx) {\n        msgTx = finalizedPsbt.extractTransaction();\n        msgTxHex = msgTx.toHex();\n        msgTxID = msgTx.getId();\n    }\n    return {\n        base64SignedPsbt: finalizedPsbt.toBase64(),\n        msgTx,\n        msgTxHex,\n        msgTxID\n    };\n};\n/**\n* handleSignPsbtWithXverse calls Xverse signTransaction and finalizes signed raw psbt.\n* extract to msgTx (if isGetMsgTx is true)\n* @param base64Psbt the base64 encoded psbt need to sign\n* @param indicesToSign indices of inputs need to sign\n* @param address address of signer\n* @param sigHashType default is SIGHASH_DEFAULT\n* @param isGetMsgTx flag used to extract to msgTx or not\n* @param cancelFn callback function for handling cancel signing\n* @returns the base64 encode signed Psbt\n*/\nconst handleSignPsbtWithSpecificWallet = async ({ base64Psbt, indicesToSign, address, sigHashType = Transaction.SIGHASH_DEFAULT, isGetMsgTx = false, walletType = WalletType.Xverse, cancelFn, }) => {\n    switch (walletType) {\n        case WalletType.Xverse: {\n            return handleSignPsbtWithXverse({\n                base64Psbt, indicesToSign,\n                address,\n                sigHashType,\n                isGetMsgTx,\n                cancelFn,\n            });\n        }\n        default: {\n            throw new SDKError(ERROR_CODE.WALLET_NOT_SUPPORT);\n        }\n    }\n};\nexport { handleSignPsbtWithSpecificWallet };\n//# sourceMappingURL=xverse.js.map","import { BNZero, BlockStreamURL, DummyUTXOValue, MinSats } from \"./constants\";\nimport { ECPair, generateTaprootAddressFromPubKey, generateTaprootKeyPair, toXOnly, tweakSigner } from \"./wallet\";\nimport { Psbt, Transaction, payments } from \"bitcoinjs-lib\";\nimport SDKError, { ERROR_CODE } from \"../constants/error\";\nimport axios from \"axios\";\nimport { estimateTxFee, fromSat } from \"./utils\";\nimport { filterAndSortCardinalUTXOs, findExactValueUTXO, selectInscriptionUTXO, selectTheSmallestUTXO, selectUTXOs } from \"./selectcoin\";\nimport BigNumber from \"bignumber.js\";\nimport { Network } from \"./network\";\nimport { handleSignPsbtWithSpecificWallet } from \"./xverse\";\n/**\n* createTx creates the Bitcoin transaction (including sending inscriptions).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the sender\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst signPSBT = ({ senderPrivateKey, psbtB64, indicesToSign, sigHashType = Transaction.SIGHASH_DEFAULT }) => {\n    // parse psbt string \n    const rawPsbt = Psbt.fromBase64(psbtB64);\n    // init key pair and tweakedSigner from senderPrivateKey\n    const { tweakedSigner } = generateTaprootKeyPair(senderPrivateKey);\n    // sign inputs\n    for (let i = 0; i < rawPsbt.txInputs.length; i++) {\n        if (indicesToSign.findIndex(value => value === i) !== -1) {\n            rawPsbt.signInput(i, tweakedSigner, [sigHashType]);\n        }\n    }\n    // finalize inputs\n    for (let i = 0; i < rawPsbt.txInputs.length; i++) {\n        if (indicesToSign.findIndex(value => value === i) !== -1) {\n            rawPsbt.finalizeInput(i);\n        }\n    }\n    // extract psbt to get msgTx\n    const msgTx = rawPsbt.extractTransaction();\n    return {\n        signedBase64PSBT: rawPsbt.toBase64(),\n        msgTx: msgTx,\n        msgTxHex: msgTx.toHex(),\n        msgTxID: msgTx.getId(),\n    };\n};\n/**\n* createTx creates the Bitcoin transaction (including sending inscriptions).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the sender\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst signPSBT2 = ({ senderPrivateKey, psbtB64, indicesToSign, sigHashType = Transaction.SIGHASH_DEFAULT }) => {\n    // parse psbt string \n    const rawPsbt = Psbt.fromBase64(psbtB64);\n    // init key pair and tweakedSigner from senderPrivateKey\n    const { tweakedSigner } = generateTaprootKeyPair(senderPrivateKey);\n    // sign inputs\n    for (let i = 0; i < rawPsbt.txInputs.length; i++) {\n        // if (indicesToSign.findIndex(value => value === i) !== -1) {\n        try {\n            rawPsbt.signInput(i, tweakedSigner, [sigHashType]);\n        }\n        catch (e) {\n            console.log(\"Sign index error: \", i, e);\n        }\n        // }\n    }\n    // finalize inputs\n    for (let i = 0; i < rawPsbt.txInputs.length; i++) {\n        // if (indicesToSign.findIndex(value => value === i) !== -1) {\n        try {\n            rawPsbt.finalizeInput(i);\n        }\n        catch (e) {\n            console.log(\"Finalize index error: \", i, e);\n        }\n        // }\n    }\n    // extract psbt to get msgTx\n    // const msgTx = rawPsbt.extractTransaction();\n    console.log(\"hex psbt: \", rawPsbt.toHex());\n    return rawPsbt.toBase64();\n};\n/**\n* createTx creates the Bitcoin transaction (including sending inscriptions).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the sender\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\n// const signMsgTx = (\n//     {\n//         senderPrivateKey, hexMsgTx, indicesToSign, sigHashType = Transaction.SIGHASH_DEFAULT\n//     }: {\n//         senderPrivateKey: Buffer,\n//         hexMsgTx: string,\n//         indicesToSign?: number[],\n//         sigHashType?: number,\n//     }\n// ): ISignPSBTResp => {\n//     // parse msgTx string \n//     const psbt = Psbt.fromHex(hexMsgTx);\n//     for (const input of msgTx.ins) {\n//         // TODO\n//         psbt.addInput({\n//             ...input\n//         });\n//     }\n//     for (const output of msgTx.outs) {\n//         // TODO\n//         psbt.addOutput({\n//             ...output\n//         });\n//     }\n//     // init key pair and tweakedSigner from senderPrivateKey\n//     const { tweakedSigner } = generateTaprootKeyPair(senderPrivateKey);\n//     // sign inputs\n//     for (let i = 0; i < msgTx.ins.length; i++) {\n//         // if (indicesToSign.findIndex(value => value === i) !== -1) {\n//         // msgTx.ins[i](i, tweakedSigner, [sigHashType]);\n//         psbt.signInput(i, tweakedSigner);\n//         // }\n//     }\n//     // finalize inputs\n//     for (let i = 0; i < psbt.txInputs.length; i++) {\n//         // if (indicesToSign.findIndex(value => value === i) !== -1) {\n//         psbt.finalizeInput(i);\n//         // }\n//     }\n//     // extract psbt to get msgTx\n//     const finalMsgTx = psbt.extractTransaction();\n//     return {\n//         signedBase64PSBT: psbt.toBase64(),\n//         msgTx: finalMsgTx,\n//         msgTxHex: finalMsgTx.toHex(),\n//         msgTxID: finalMsgTx.getId(),\n//     };\n// };\nconst createRawTxDummyUTXOForSale = ({ pubKey, utxos, inscriptions, sellInscriptionID, feeRatePerByte, }) => {\n    // select dummy UTXO \n    // if there is no dummy UTXO, we have to create raw tx to split dummy UTXO\n    let dummyUTXORes;\n    let selectedUTXOs = [];\n    let splitPsbtB64 = \"\";\n    let indicesToSign = [];\n    let newValueInscriptionRes = BNZero;\n    try {\n        // create dummy UTXO from cardinal UTXOs\n        const res = createRawTxDummyUTXOFromCardinal(pubKey, utxos, inscriptions, feeRatePerByte);\n        dummyUTXORes = res.dummyUTXO;\n        selectedUTXOs = res.selectedUTXOs;\n        splitPsbtB64 = res.splitPsbtB64;\n        indicesToSign = res.indicesToSign;\n    }\n    catch (e) {\n        // select inscription UTXO\n        const { inscriptionUTXO, inscriptionInfo } = selectInscriptionUTXO(utxos, inscriptions, sellInscriptionID);\n        // create dummy UTXO from inscription UTXO\n        const { resRawTx, newValueInscription } = createRawTxSplitFundFromOrdinalUTXO({\n            pubKey, inscriptionUTXO, inscriptionInfo, sendAmount: new BigNumber(DummyUTXOValue), feeRatePerByte\n        });\n        selectedUTXOs = resRawTx.selectedUTXOs;\n        splitPsbtB64 = resRawTx.base64Psbt;\n        indicesToSign = resRawTx.indicesToSign;\n        newValueInscriptionRes = newValueInscription;\n        // TODO: 0xkraken\n        // newInscriptionUTXO = {\n        //     tx_hash: txID,\n        //     tx_output_n: 0,\n        //     value: newValueInscription,\n        // };\n        // dummyUTXORes = {\n        //     tx_hash: txID,\n        //     tx_output_n: 1,\n        //     value: new BigNumber(DummyUTXOValue),\n        // };\n    }\n    return {\n        dummyUTXO: dummyUTXORes,\n        splitPsbtB64,\n        indicesToSign,\n        selectedUTXOs,\n        newValueInscription: newValueInscriptionRes\n    };\n};\n/**\n* createTx creates the Bitcoin transaction (including sending inscriptions).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the sender\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst createTx = (senderPrivateKey, utxos, inscriptions, sendInscriptionID = \"\", receiverInsAddress, sendAmount, feeRatePerByte, isUseInscriptionPayFeeParam = true) => {\n    // init key pair and tweakedSigner from senderPrivateKey\n    const { keyPair } = generateTaprootKeyPair(senderPrivateKey);\n    const { base64Psbt, fee, changeAmount, selectedUTXOs, indicesToSign } = createRawTx({\n        pubKey: toXOnly(keyPair.publicKey),\n        utxos,\n        inscriptions,\n        sendInscriptionID,\n        receiverInsAddress,\n        sendAmount,\n        feeRatePerByte,\n        isUseInscriptionPayFeeParam,\n    });\n    const { signedBase64PSBT, msgTx, msgTxID, msgTxHex } = signPSBT({\n        senderPrivateKey,\n        psbtB64: base64Psbt,\n        indicesToSign,\n        sigHashType: Transaction.SIGHASH_DEFAULT\n    });\n    return { txID: msgTxID, txHex: msgTxHex, fee, selectedUTXOs, changeAmount, tx: msgTx };\n};\n/**\n* createRawTx creates the raw Bitcoin transaction (including sending inscriptions), but don't sign tx.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param pubKey buffer public key of the sender (It is the internal pubkey for Taproot address)\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst createRawTx = ({ pubKey, utxos, inscriptions, sendInscriptionID = \"\", receiverInsAddress, sendAmount, feeRatePerByte, isUseInscriptionPayFeeParam = true, // default is true\n }) => {\n    // validation\n    if (sendAmount.gt(BNZero) && sendAmount.lt(MinSats)) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"sendAmount must not be less than \" + fromSat(MinSats) + \" BTC.\");\n    }\n    // select UTXOs\n    const { selectedUTXOs, valueOutInscription, changeAmount, fee } = selectUTXOs(utxos, inscriptions, sendInscriptionID, sendAmount, feeRatePerByte, isUseInscriptionPayFeeParam);\n    let feeRes = fee;\n    // init key pair and tweakedSigner from senderPrivateKey\n    // const { keyPair, senderAddress, tweakedSigner, p2pktr } = generateTaprootKeyPair(senderPrivateKey);\n    const { address: senderAddress, p2pktr } = generateTaprootAddressFromPubKey(pubKey);\n    const psbt = new Psbt({ network: Network });\n    // add inputs\n    for (const input of selectedUTXOs) {\n        psbt.addInput({\n            hash: input.tx_hash,\n            index: input.tx_output_n,\n            witnessUtxo: { value: input.value.toNumber(), script: p2pktr.output },\n            tapInternalKey: pubKey,\n        });\n    }\n    // add outputs\n    if (sendInscriptionID !== \"\") {\n        // add output inscription\n        psbt.addOutput({\n            address: receiverInsAddress,\n            value: valueOutInscription.toNumber(),\n        });\n    }\n    // add output send BTC\n    if (sendAmount.gt(BNZero)) {\n        psbt.addOutput({\n            address: receiverInsAddress,\n            value: sendAmount.toNumber(),\n        });\n    }\n    // add change output\n    if (changeAmount.gt(BNZero)) {\n        if (changeAmount.gte(MinSats)) {\n            psbt.addOutput({\n                address: senderAddress,\n                value: changeAmount.toNumber(),\n            });\n        }\n        else {\n            feeRes = feeRes.plus(changeAmount);\n        }\n    }\n    const indicesToSign = [];\n    for (let i = 0; i < psbt.txInputs.length; i++) {\n        indicesToSign.push(i);\n    }\n    return { base64Psbt: psbt.toBase64(), fee: feeRes, changeAmount, selectedUTXOs, indicesToSign };\n};\n/**\n* createTxFromAnyWallet creates the raw Bitcoin transaction (including sending inscriptions), but don't sign tx.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param pubKey buffer public key of the sender (It is the internal pubkey for Taproot address)\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst createTxFromAnyWallet = async ({ pubKey, utxos, inscriptions, sendInscriptionID = \"\", receiverInsAddress, sendAmount, feeRatePerByte, isUseInscriptionPayFeeParam = true, // default is true,\nwalletType = Transaction.SIGHASH_DEFAULT, cancelFn, }) => {\n    const { address } = generateTaprootAddressFromPubKey(pubKey);\n    const { base64Psbt, indicesToSign, selectedUTXOs, fee, changeAmount } = createRawTx({\n        pubKey,\n        utxos,\n        inscriptions,\n        sendInscriptionID,\n        receiverInsAddress,\n        sendAmount,\n        feeRatePerByte,\n        isUseInscriptionPayFeeParam,\n    });\n    // sign transaction \n    const { base64SignedPsbt, msgTx, msgTxID, msgTxHex } = await handleSignPsbtWithSpecificWallet({\n        base64Psbt: base64Psbt,\n        indicesToSign: indicesToSign,\n        address: address,\n        isGetMsgTx: true,\n        walletType,\n        cancelFn\n    });\n    return {\n        tx: msgTx,\n        txID: msgTxID,\n        txHex: msgTxHex,\n        fee,\n        selectedUTXOs,\n        changeAmount,\n    };\n};\n/**\n* createTx creates the Bitcoin transaction (including sending inscriptions).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the sender\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst createTxSendBTC = ({ senderPrivateKey, utxos, inscriptions, paymentInfos, feeRatePerByte, }) => {\n    // validation\n    let totalPaymentAmount = BNZero;\n    for (const info of paymentInfos) {\n        if (info.amount.gt(BNZero) && info.amount.lt(MinSats)) {\n            throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"sendAmount must not be less than \" + fromSat(MinSats) + \" BTC.\");\n        }\n        totalPaymentAmount = totalPaymentAmount.plus(info.amount);\n    }\n    // select UTXOs\n    const { selectedUTXOs, changeAmount, fee } = selectUTXOs(utxos, inscriptions, \"\", totalPaymentAmount, feeRatePerByte, false);\n    let feeRes = fee;\n    // init key pair and tweakedSigner from senderPrivateKey\n    const { keyPair, senderAddress, tweakedSigner, p2pktr } = generateTaprootKeyPair(senderPrivateKey);\n    const psbt = new Psbt({ network: Network });\n    // add inputs\n    for (const input of selectedUTXOs) {\n        psbt.addInput({\n            hash: input.tx_hash,\n            index: input.tx_output_n,\n            witnessUtxo: { value: input.value.toNumber(), script: p2pktr.output },\n            tapInternalKey: toXOnly(keyPair.publicKey),\n        });\n    }\n    // add outputs send BTC\n    for (const info of paymentInfos) {\n        psbt.addOutput({\n            address: info.address,\n            value: info.amount.toNumber(),\n        });\n    }\n    // add change output\n    if (changeAmount.gt(BNZero)) {\n        if (changeAmount.gte(MinSats)) {\n            psbt.addOutput({\n                address: senderAddress,\n                value: changeAmount.toNumber(),\n            });\n        }\n        else {\n            feeRes = feeRes.plus(changeAmount);\n        }\n    }\n    // sign tx\n    for (let i = 0; i < selectedUTXOs.length; i++) {\n        psbt.signInput(i, tweakedSigner);\n    }\n    psbt.finalizeAllInputs();\n    // get tx hex\n    const tx = psbt.extractTransaction();\n    console.log(\"Transaction : \", tx);\n    const txHex = tx.toHex();\n    return { txID: tx.getId(), txHex, fee: feeRes, selectedUTXOs, changeAmount, tx };\n};\n/**\n* createTx creates the Bitcoin transaction (including sending inscriptions).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the sender\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst createRawTxSendBTC = ({ pubKey, utxos, inscriptions, paymentInfos, feeRatePerByte, }) => {\n    // validation\n    let totalPaymentAmount = BNZero;\n    for (const info of paymentInfos) {\n        if (info.amount.gt(BNZero) && info.amount.lt(MinSats)) {\n            throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"sendAmount must not be less than \" + fromSat(MinSats) + \" BTC.\");\n        }\n        totalPaymentAmount = totalPaymentAmount.plus(info.amount);\n    }\n    // select UTXOs\n    const { selectedUTXOs, changeAmount, fee } = selectUTXOs(utxos, inscriptions, \"\", totalPaymentAmount, feeRatePerByte, false);\n    let feeRes = fee;\n    let changeAmountRes = changeAmount;\n    // init key pair and tweakedSigner from senderPrivateKey\n    const { address: senderAddress, p2pktr } = generateTaprootAddressFromPubKey(pubKey);\n    const psbt = new Psbt({ network: Network });\n    // add inputs\n    for (const input of selectedUTXOs) {\n        psbt.addInput({\n            hash: input.tx_hash,\n            index: input.tx_output_n,\n            witnessUtxo: { value: input.value.toNumber(), script: p2pktr.output },\n            tapInternalKey: pubKey,\n        });\n    }\n    // add outputs send BTC\n    for (const info of paymentInfos) {\n        psbt.addOutput({\n            address: info.address,\n            value: info.amount.toNumber(),\n        });\n    }\n    // add change output\n    if (changeAmountRes.gt(BNZero)) {\n        if (changeAmountRes.gte(MinSats)) {\n            psbt.addOutput({\n                address: senderAddress,\n                value: changeAmountRes.toNumber(),\n            });\n        }\n        else {\n            feeRes = feeRes.plus(changeAmountRes);\n            changeAmountRes = BNZero;\n        }\n    }\n    const indicesToSign = [];\n    for (let i = 0; i < psbt.txInputs.length; i++) {\n        indicesToSign.push(i);\n    }\n    return { base64Psbt: psbt.toBase64(), fee: feeRes, changeAmount: changeAmountRes, selectedUTXOs, indicesToSign };\n};\n/**\n* createTxWithSpecificUTXOs creates the Bitcoin transaction with specific UTXOs (including sending inscriptions).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* This function is used for testing.\n* @param senderPrivateKey buffer private key of the sender\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount amount need to send (in sat)\n* @param valueOutInscription inscription output's value (in sat)\n* @param changeAmount cardinal change amount (in sat)\n* @param fee transaction fee (in sat)\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst createTxWithSpecificUTXOs = (senderPrivateKey, utxos, sendInscriptionID = \"\", receiverInsAddress, sendAmount, valueOutInscription, changeAmount, fee) => {\n    const selectedUTXOs = utxos;\n    // init key pair from senderPrivateKey\n    const keypair = ECPair.fromPrivateKey(senderPrivateKey, { network: Network });\n    // Tweak the original keypair\n    const tweakedSigner = tweakSigner(keypair, { network: Network });\n    // Generate an address from the tweaked public key\n    const p2pktr = payments.p2tr({\n        pubkey: toXOnly(tweakedSigner.publicKey),\n        network: Network,\n    });\n    const senderAddress = p2pktr.address ? p2pktr.address : \"\";\n    if (senderAddress === \"\") {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Can not get the sender address from the private key\");\n    }\n    const psbt = new Psbt({ network: Network });\n    // add inputs\n    for (const input of selectedUTXOs) {\n        psbt.addInput({\n            hash: input.tx_hash,\n            index: input.tx_output_n,\n            witnessUtxo: { value: input.value.toNumber(), script: p2pktr.output },\n            tapInternalKey: toXOnly(keypair.publicKey),\n        });\n    }\n    // add outputs\n    if (sendInscriptionID !== \"\") {\n        // add output inscription\n        psbt.addOutput({\n            address: receiverInsAddress,\n            value: valueOutInscription.toNumber(),\n        });\n    }\n    // add output send BTC\n    if (sendAmount.gt(BNZero)) {\n        psbt.addOutput({\n            address: receiverInsAddress,\n            value: sendAmount.toNumber(),\n        });\n    }\n    // add change output\n    if (changeAmount.gt(BNZero)) {\n        psbt.addOutput({\n            address: senderAddress,\n            value: changeAmount.toNumber(),\n        });\n    }\n    // sign tx\n    for (let i = 0; i < selectedUTXOs.length; i++) {\n        psbt.signInput(i, tweakedSigner);\n    }\n    psbt.finalizeAllInputs();\n    // get tx hex\n    const tx = psbt.extractTransaction();\n    console.log(\"Transaction : \", tx);\n    const txHex = tx.toHex();\n    return { txID: tx.getId(), txHex, fee };\n};\n/**\n* createTx creates the Bitcoin transaction (including sending inscriptions).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the sender\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst createTxSplitFundFromOrdinalUTXO = (senderPrivateKey, inscriptionUTXO, inscriptionInfo, sendAmount, feeRatePerByte) => {\n    const { keyPair } = generateTaprootKeyPair(senderPrivateKey);\n    const { resRawTx, newValueInscription } = createRawTxSplitFundFromOrdinalUTXO({\n        pubKey: toXOnly(keyPair.publicKey),\n        inscriptionUTXO, inscriptionInfo,\n        sendAmount,\n        feeRatePerByte,\n    });\n    // sign tx\n    const { signedBase64PSBT, msgTx, msgTxID, msgTxHex } = signPSBT({\n        senderPrivateKey,\n        psbtB64: resRawTx.base64Psbt,\n        indicesToSign: resRawTx.indicesToSign,\n        sigHashType: Transaction.SIGHASH_DEFAULT,\n    });\n    return { txID: msgTxID, txHex: msgTxHex, fee: resRawTx.fee, selectedUTXOs: resRawTx.selectedUTXOs, newValueInscription };\n};\n/**\n* createRawTxSplitFundFromOrdinalUTXO creates the Bitcoin transaction (including sending inscriptions).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the sender\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst createRawTxSplitFundFromOrdinalUTXO = ({ pubKey, inscriptionUTXO, inscriptionInfo, sendAmount, feeRatePerByte, }) => {\n    // validation\n    if (sendAmount.gt(BNZero) && sendAmount.lt(MinSats)) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"sendAmount must not be less than \" + fromSat(MinSats) + \" BTC.\");\n    }\n    const { address: senderAddress, p2pktr } = generateTaprootAddressFromPubKey(pubKey);\n    const maxAmountInsSpend = inscriptionUTXO.value.minus(inscriptionInfo.offset).minus(1).minus(MinSats);\n    const fee = new BigNumber(estimateTxFee(1, 2, feeRatePerByte));\n    const totalAmountSpend = sendAmount.plus(fee);\n    if (totalAmountSpend.gt(maxAmountInsSpend)) {\n        throw new SDKError(ERROR_CODE.NOT_ENOUGH_BTC_TO_PAY_FEE);\n    }\n    const newValueInscription = inscriptionUTXO.value.minus(totalAmountSpend);\n    const psbt = new Psbt({ network: Network });\n    // add inputs\n    psbt.addInput({\n        hash: inscriptionUTXO.tx_hash,\n        index: inscriptionUTXO.tx_output_n,\n        witnessUtxo: { value: inscriptionUTXO.value.toNumber(), script: p2pktr.output },\n        tapInternalKey: pubKey,\n    });\n    // add outputs\n    // add output inscription: must be at index 0\n    psbt.addOutput({\n        address: senderAddress,\n        value: newValueInscription.toNumber(),\n    });\n    // add output send BTC\n    psbt.addOutput({\n        address: senderAddress,\n        value: sendAmount.toNumber(),\n    });\n    const indicesToSign = [];\n    for (let i = 0; i < psbt.txInputs.length; i++) {\n        indicesToSign.push(i);\n    }\n    return {\n        resRawTx: { base64Psbt: psbt.toBase64(), fee, changeAmount: BNZero, selectedUTXOs: [inscriptionUTXO], indicesToSign },\n        newValueInscription: newValueInscription\n    };\n};\nconst selectDummyUTXO = (utxos, inscriptions) => {\n    const smallestUTXO = selectTheSmallestUTXO(utxos, inscriptions);\n    if (smallestUTXO.value.lte(DummyUTXOValue)) {\n        return smallestUTXO;\n    }\n    throw new SDKError(ERROR_CODE.NOT_FOUND_DUMMY_UTXO);\n};\nconst createDummyUTXOFromCardinal = (senderPrivateKey, utxos, inscriptions, feeRatePerByte) => {\n    // create dummy UTXO from cardinal UTXOs\n    let dummyUTXO;\n    let newUTXO = null;\n    const smallestUTXO = selectTheSmallestUTXO(utxos, inscriptions);\n    if (smallestUTXO.value.lte(DummyUTXOValue)) {\n        dummyUTXO = smallestUTXO;\n        return { dummyUTXO: dummyUTXO, splitTxID: \"\", selectedUTXOs: [], newUTXO: newUTXO, fee: BNZero, txHex: \"\" };\n    }\n    else {\n        const { senderAddress } = generateTaprootKeyPair(senderPrivateKey);\n        const { txID, txHex, fee, selectedUTXOs, changeAmount } = createTx(senderPrivateKey, utxos, inscriptions, \"\", senderAddress, new BigNumber(DummyUTXOValue), feeRatePerByte, false);\n        // init dummy UTXO rely on the result of the split tx\n        dummyUTXO = {\n            tx_hash: txID,\n            tx_output_n: 0,\n            value: new BigNumber(DummyUTXOValue),\n        };\n        if (changeAmount.gt(BNZero)) {\n            newUTXO = {\n                tx_hash: txID,\n                tx_output_n: 1,\n                value: changeAmount,\n            };\n        }\n        return { dummyUTXO: dummyUTXO, splitTxID: txID, selectedUTXOs, newUTXO: newUTXO, fee, txHex };\n    }\n};\nconst createRawTxDummyUTXOFromCardinal = (pubKey, utxos, inscriptions, feeRatePerByte) => {\n    // create dummy UTXO from cardinal UTXOs\n    let dummyUTXO;\n    const smallestUTXO = selectTheSmallestUTXO(utxos, inscriptions);\n    if (smallestUTXO.value.lte(DummyUTXOValue)) {\n        dummyUTXO = smallestUTXO;\n        return { dummyUTXO: dummyUTXO, splitPsbtB64: \"\", indicesToSign: [], changeAmount: BNZero, selectedUTXOs: [], fee: BNZero };\n    }\n    else {\n        const { address: senderAddress } = generateTaprootAddressFromPubKey(pubKey);\n        const { base64Psbt, fee, changeAmount, selectedUTXOs, indicesToSign } = createRawTx({\n            pubKey: pubKey,\n            utxos: utxos,\n            inscriptions: inscriptions,\n            sendInscriptionID: \"\",\n            receiverInsAddress: senderAddress,\n            sendAmount: new BigNumber(DummyUTXOValue),\n            feeRatePerByte,\n            isUseInscriptionPayFeeParam: false,\n        });\n        // TODO: 0x2525\n        // init dummy UTXO rely on the result of the split tx\n        // dummyUTXO = {\n        //     tx_hash: txID,\n        //     tx_output_n: 0,\n        //     value: new BigNumber(DummyUTXOValue),\n        // };\n        // if (changeAmount.gt(BNZero)) {\n        //     newUTXO = {\n        //         tx_hash: txID,\n        //         tx_output_n: 1,\n        //         value: changeAmount,\n        //     };\n        // }\n        return { dummyUTXO: dummyUTXO, splitPsbtB64: base64Psbt, indicesToSign, selectedUTXOs, fee, changeAmount };\n    }\n};\nconst prepareUTXOsToBuyMultiInscriptions = ({ privateKey, address, utxos, inscriptions, feeRatePerByte, buyReqFullInfos, }) => {\n    let splitTxID = \"\";\n    let splitTxHex = \"\";\n    let newUTXO;\n    let dummyUTXO;\n    let selectedUTXOs = [];\n    let fee = BNZero;\n    // filter to get cardinal utxos\n    const { cardinalUTXOs, totalCardinalAmount } = filterAndSortCardinalUTXOs(utxos, inscriptions);\n    // select dummy utxo\n    let needCreateDummyUTXO = false;\n    try {\n        dummyUTXO = selectDummyUTXO(cardinalUTXOs, {});\n    }\n    catch (e) {\n        console.log(\"Can not find dummy UTXO, need to create it.\");\n        needCreateDummyUTXO = true;\n    }\n    const needPaymentUTXOs = [];\n    for (let i = 0; i < buyReqFullInfos.length; i++) {\n        const info = buyReqFullInfos[i];\n        try {\n            const { utxo } = findExactValueUTXO(cardinalUTXOs, info.price);\n            buyReqFullInfos[i].paymentUTXO = utxo;\n        }\n        catch (e) {\n            needPaymentUTXOs.push({ buyInfoIndex: i, amount: info.price });\n        }\n    }\n    console.log(\"buyReqFullInfos: \", buyReqFullInfos);\n    // create split tx to create enough payment uxtos (if needed)\n    if (needPaymentUTXOs.length > 0 || needCreateDummyUTXO) {\n        const paymentInfos = [];\n        for (const info of needPaymentUTXOs) {\n            paymentInfos.push({ address: address, amount: info.amount });\n        }\n        if (needCreateDummyUTXO) {\n            paymentInfos.push({ address: address, amount: new BigNumber(DummyUTXOValue) });\n        }\n        const res = createTxSendBTC({ senderPrivateKey: privateKey, utxos: cardinalUTXOs, inscriptions: {}, paymentInfos, feeRatePerByte });\n        splitTxID = res.txID;\n        splitTxHex = res.txHex;\n        selectedUTXOs = res.selectedUTXOs;\n        fee = res.fee;\n        for (let i = 0; i < needPaymentUTXOs.length; i++) {\n            const info = needPaymentUTXOs[i];\n            const buyInfoIndex = info.buyInfoIndex;\n            if (buyReqFullInfos[buyInfoIndex].paymentUTXO != null) {\n                throw new SDKError(ERROR_CODE.INVALID_CODE);\n            }\n            const newUTXO = {\n                tx_hash: splitTxID,\n                tx_output_n: i,\n                value: info.amount,\n            };\n            buyReqFullInfos[buyInfoIndex].paymentUTXO = newUTXO;\n        }\n        if (needCreateDummyUTXO) {\n            dummyUTXO = {\n                tx_hash: splitTxID,\n                tx_output_n: needPaymentUTXOs.length,\n                value: new BigNumber(DummyUTXOValue),\n            };\n        }\n        if (res.changeAmount.gt(BNZero)) {\n            const indexChangeUTXO = needCreateDummyUTXO ? needPaymentUTXOs.length + 1 : needPaymentUTXOs.length;\n            newUTXO = {\n                tx_hash: splitTxID,\n                tx_output_n: indexChangeUTXO,\n                value: res.changeAmount,\n            };\n        }\n    }\n    return { buyReqFullInfos, dummyUTXO, splitTxID, selectedUTXOs, newUTXO, fee, splitTxHex };\n};\nconst createRawTxToPrepareUTXOsToBuyMultiInscs = ({ pubKey, address, utxos, inscriptions, feeRatePerByte, buyReqFullInfos, }) => {\n    let splitPsbtB64 = \"\";\n    let dummyUTXO;\n    let selectedUTXOs = [];\n    let fee = BNZero;\n    let changeAmount = BNZero;\n    let indicesToSign = [];\n    // filter to get cardinal utxos\n    const { cardinalUTXOs } = filterAndSortCardinalUTXOs(utxos, inscriptions);\n    // select dummy utxo\n    let needCreateDummyUTXO = false;\n    try {\n        dummyUTXO = selectDummyUTXO(cardinalUTXOs, {});\n    }\n    catch (e) {\n        console.log(\"Can not find dummy UTXO, need to create it.\");\n        needCreateDummyUTXO = true;\n    }\n    // find payment utxos for each buy info\n    const needPaymentUTXOs = [];\n    for (let i = 0; i < buyReqFullInfos.length; i++) {\n        const info = buyReqFullInfos[i];\n        try {\n            const { utxo } = findExactValueUTXO(cardinalUTXOs, info.price);\n            buyReqFullInfos[i].paymentUTXO = utxo;\n        }\n        catch (e) {\n            needPaymentUTXOs.push({ buyInfoIndex: i, amount: info.price });\n        }\n    }\n    console.log(\"buyReqFullInfos: \", buyReqFullInfos);\n    // create split tx to create enough payment uxtos (if needed)\n    if (needPaymentUTXOs.length > 0 || needCreateDummyUTXO) {\n        const paymentInfos = [];\n        for (const info of needPaymentUTXOs) {\n            paymentInfos.push({ address: address, amount: info.amount });\n        }\n        if (needCreateDummyUTXO) {\n            paymentInfos.push({ address: address, amount: new BigNumber(DummyUTXOValue) });\n        }\n        const res = createRawTxSendBTC({ pubKey: pubKey, utxos: cardinalUTXOs, inscriptions: {}, paymentInfos, feeRatePerByte });\n        selectedUTXOs = res.selectedUTXOs;\n        fee = res.fee;\n        splitPsbtB64 = res.base64Psbt;\n        changeAmount = res.changeAmount;\n        indicesToSign = res.indicesToSign;\n    }\n    return { buyReqFullInfos, dummyUTXO, needPaymentUTXOs, splitPsbtB64, selectedUTXOs, fee, changeAmount: changeAmount, needCreateDummyUTXO, indicesToSign };\n};\nconst broadcastTx = async (txHex) => {\n    const blockstream = new axios.Axios({\n        baseURL: BlockStreamURL\n    });\n    const response = await blockstream.post(\"/tx\", txHex);\n    const { status, data } = response;\n    if (status !== 200) {\n        throw new SDKError(ERROR_CODE.ERR_BROADCAST_TX, data);\n    }\n    return response.data;\n};\nexport { selectUTXOs, createTx, createRawTx, createTxFromAnyWallet, broadcastTx, createTxWithSpecificUTXOs, createRawTxDummyUTXOForSale, createTxSplitFundFromOrdinalUTXO, createRawTxSplitFundFromOrdinalUTXO, createDummyUTXOFromCardinal, createRawTxDummyUTXOFromCardinal, createTxSendBTC, createRawTxSendBTC, prepareUTXOsToBuyMultiInscriptions, createRawTxToPrepareUTXOsToBuyMultiInscs, signPSBT, signPSBT2, };\n//# sourceMappingURL=tx.js.map","import { BNZero, DummyUTXOValue, MinSats, OutputSize, WalletType } from \"./constants\";\nimport { Psbt, Transaction } from \"bitcoinjs-lib\";\nimport SDKError, { ERROR_CODE } from \"../constants/error\";\nimport { createDummyUTXOFromCardinal, createRawTxDummyUTXOForSale, createRawTxDummyUTXOFromCardinal, createRawTxToPrepareUTXOsToBuyMultiInscs, createTxSplitFundFromOrdinalUTXO, prepareUTXOsToBuyMultiInscriptions } from \"./tx\";\nimport { estimateTxFee, fromSat, } from \"./utils\";\nimport { generateTaprootAddressFromPubKey, generateTaprootKeyPair, toXOnly, } from \"./wallet\";\nimport { selectCardinalUTXOs, selectInscriptionUTXO, selectUTXOsToCreateBuyTx } from \"./selectcoin\";\nimport BigNumber from \"bignumber.js\";\nimport { Network } from \"./network\";\nimport { handleSignPsbtWithSpecificWallet } from \"./xverse\";\nimport { verifySchnorr } from \"@bitcoinerlab/secp256k1\";\nconst SigHashTypeForSale = Transaction.SIGHASH_SINGLE | Transaction.SIGHASH_ANYONECANPAY;\n/**\n* createPSBTToSell creates the partially signed bitcoin transaction to sale the inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerPrivateKey buffer private key of the seller\n* @param sellerAddress payment address of the seller to recieve BTC from buyer\n* @param ordinalInput ordinal input coin to sell\n* @param price price of the inscription that the seller wants to sell (in satoshi)\n* @returns the encoded base64 partially signed transaction\n*/\nconst createPSBTToSell = (params) => {\n    const psbt = new Psbt({ network: Network });\n    const { inscriptionUTXO: ordinalInput, amountPayToSeller, receiverBTCAddress, sellerPrivateKey, dummyUTXO, creatorAddress, feePayToCreator } = params;\n    const { keyPair, tweakedSigner, p2pktr } = generateTaprootKeyPair(sellerPrivateKey);\n    // add ordinal input into the first input coins with \n    // sighashType: Transaction.SIGHASH_SINGLE | Transaction.SIGHASH_ANYONECANPAY\n    psbt.addInput({\n        hash: ordinalInput.tx_hash,\n        index: ordinalInput.tx_output_n,\n        witnessUtxo: { value: ordinalInput.value.toNumber(), script: p2pktr.output },\n        tapInternalKey: toXOnly(keyPair.publicKey),\n        sighashType: Transaction.SIGHASH_SINGLE | Transaction.SIGHASH_ANYONECANPAY,\n    });\n    if (dummyUTXO !== undefined && dummyUTXO !== null && dummyUTXO.value.gt(BNZero)) {\n        psbt.addOutput({\n            address: receiverBTCAddress,\n            value: amountPayToSeller.plus(dummyUTXO.value).toNumber(),\n        });\n    }\n    else {\n        psbt.addOutput({\n            address: receiverBTCAddress,\n            value: amountPayToSeller.toNumber(),\n        });\n    }\n    // the second input and output\n    // add dummy UTXO and output for paying to creator\n    if (feePayToCreator.gt(BNZero) && creatorAddress !== \"\") {\n        psbt.addInput({\n            hash: dummyUTXO.tx_hash,\n            index: dummyUTXO.tx_output_n,\n            witnessUtxo: { value: dummyUTXO.value.toNumber(), script: p2pktr.output },\n            tapInternalKey: toXOnly(keyPair.publicKey),\n            sighashType: Transaction.SIGHASH_SINGLE | Transaction.SIGHASH_ANYONECANPAY,\n        });\n        psbt.addOutput({\n            address: creatorAddress,\n            value: feePayToCreator.toNumber()\n        });\n    }\n    // sign tx\n    for (let i = 0; i < psbt.txInputs.length; i++) {\n        psbt.signInput(i, tweakedSigner, [Transaction.SIGHASH_SINGLE | Transaction.SIGHASH_ANYONECANPAY]);\n        let isValid = true;\n        try {\n            isValid = psbt.validateSignaturesOfInput(i, verifySchnorr, tweakedSigner.publicKey);\n        }\n        catch (e) {\n            isValid = false;\n        }\n        if (!isValid) {\n            throw new SDKError(ERROR_CODE.INVALID_SIG);\n        }\n    }\n    psbt.finalizeAllInputs();\n    return psbt.toBase64();\n};\n/**\n* createPSBTToSell creates the partially signed bitcoin transaction to sale the inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerPrivateKey buffer private key of the seller\n* @param sellerAddress payment address of the seller to recieve BTC from buyer\n* @param ordinalInput ordinal input coin to sell\n* @param price price of the inscription that the seller wants to sell (in satoshi)\n* @returns the encoded base64 partially signed transaction\n*/\nconst createRawPSBTToSell = (params) => {\n    const psbt = new Psbt({ network: Network });\n    const { inscriptionUTXO: ordinalInput, amountPayToSeller, receiverBTCAddress, internalPubKey, dummyUTXO, creatorAddress, feePayToCreator } = params;\n    const { address, p2pktr } = generateTaprootAddressFromPubKey(internalPubKey);\n    // add ordinal input into the first input coins with \n    // sighashType: Transaction.SIGHASH_SINGLE | Transaction.SIGHASH_ANYONECANPAY\n    psbt.addInput({\n        hash: ordinalInput.tx_hash,\n        index: ordinalInput.tx_output_n,\n        witnessUtxo: { value: ordinalInput.value.toNumber(), script: p2pktr.output },\n        tapInternalKey: internalPubKey,\n        sighashType: Transaction.SIGHASH_SINGLE | Transaction.SIGHASH_ANYONECANPAY,\n    });\n    const selectedUTXOs = [ordinalInput];\n    if (dummyUTXO !== undefined && dummyUTXO !== null && dummyUTXO.value.gt(BNZero)) {\n        psbt.addOutput({\n            address: receiverBTCAddress,\n            value: amountPayToSeller.plus(dummyUTXO.value).toNumber(),\n        });\n    }\n    else {\n        psbt.addOutput({\n            address: receiverBTCAddress,\n            value: amountPayToSeller.toNumber(),\n        });\n    }\n    // the second input and output\n    // add dummy UTXO and output for paying to creator\n    if (feePayToCreator.gt(BNZero) && creatorAddress !== \"\") {\n        psbt.addInput({\n            hash: dummyUTXO.tx_hash,\n            index: dummyUTXO.tx_output_n,\n            witnessUtxo: { value: dummyUTXO.value.toNumber(), script: p2pktr.output },\n            tapInternalKey: internalPubKey,\n            sighashType: Transaction.SIGHASH_SINGLE | Transaction.SIGHASH_ANYONECANPAY | Transaction.SIGHASH_DEFAULT,\n        });\n        selectedUTXOs.push(dummyUTXO);\n        psbt.addOutput({\n            address: creatorAddress,\n            value: feePayToCreator.toNumber()\n        });\n    }\n    const indicesToSign = [];\n    for (let i = 0; i < psbt.txInputs.length; i++) {\n        indicesToSign.push(i);\n    }\n    return { base64Psbt: psbt.toBase64(), selectedUTXOs, indicesToSign, fee: BNZero, changeAmount: BNZero };\n};\n/**\n* createPSBTToBuy creates the partially signed bitcoin transaction to buy the inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerSignedPsbt PSBT from seller\n* @param buyerPrivateKey buffer private key of the buyer\n* @param buyerAddress payment address of the buy to receive inscription\n* @param valueInscription value in inscription\n* @param price price of the inscription that the seller wants to sell (in satoshi)\n* @param paymentUtxos cardinal input coins to payment\n* @param dummyUtxo cardinal dummy input coin\n* @returns the encoded base64 partially signed transaction\n*/\nconst createPSBTToBuy = (params) => {\n    const psbt = new Psbt({ network: Network });\n    const { sellerSignedPsbt, buyerPrivateKey, price, receiverInscriptionAddress, valueInscription, paymentUtxos, dummyUtxo, feeRate } = params;\n    let totalValue = BNZero;\n    const { keyPair, tweakedSigner, p2pktr, senderAddress: buyerAddress } = generateTaprootKeyPair(buyerPrivateKey);\n    // Add dummy utxo to the first input coin\n    psbt.addInput({\n        hash: dummyUtxo.tx_hash,\n        index: dummyUtxo.tx_output_n,\n        witnessUtxo: { value: dummyUtxo.value.toNumber(), script: p2pktr.output },\n        tapInternalKey: toXOnly(keyPair.publicKey),\n    });\n    // Add inscription output\n    // the frist output coin has value equal to the sum of dummy value and value inscription\n    // this makes sure the first output coin is inscription outcoin \n    psbt.addOutput({\n        address: receiverInscriptionAddress,\n        value: dummyUtxo.value.plus(valueInscription).toNumber(),\n    });\n    if (sellerSignedPsbt.txInputs.length !== sellerSignedPsbt.txOutputs.length) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Length of inputs and outputs in seller psbt must not be different.\");\n    }\n    for (let i = 0; i < sellerSignedPsbt.txInputs.length; i++) {\n        // Add seller signed input\n        psbt.addInput({\n            ...sellerSignedPsbt.txInputs[i],\n            ...sellerSignedPsbt.data.inputs[i]\n        });\n        // Add seller output\n        psbt.addOutput({\n            ...sellerSignedPsbt.txOutputs[i],\n        });\n    }\n    // Add payment utxo inputs\n    for (const utxo of paymentUtxos) {\n        psbt.addInput({\n            hash: utxo.tx_hash,\n            index: utxo.tx_output_n,\n            witnessUtxo: { value: utxo.value.toNumber(), script: p2pktr.output },\n            tapInternalKey: toXOnly(keyPair.publicKey),\n        });\n        totalValue = totalValue.plus(utxo.value);\n    }\n    let fee = new BigNumber(estimateTxFee(psbt.txInputs.length, psbt.txOutputs.length, feeRate));\n    if (fee.plus(price).gt(totalValue)) {\n        fee = totalValue.minus(price); // maximum fee can paid\n        if (fee.lt(BNZero)) {\n            throw new SDKError(ERROR_CODE.NOT_ENOUGH_BTC_TO_PAY_FEE);\n        }\n    }\n    let changeValue = totalValue.minus(price).minus(fee);\n    if (changeValue.gte(DummyUTXOValue)) {\n        // Create a new dummy utxo output for the next purchase\n        psbt.addOutput({\n            address: buyerAddress,\n            value: DummyUTXOValue,\n        });\n        changeValue = changeValue.minus(DummyUTXOValue);\n        const extraFee = new BigNumber(OutputSize * feeRate);\n        if (changeValue.gte(extraFee)) {\n            changeValue = changeValue.minus(extraFee);\n            fee = fee.plus(extraFee);\n        }\n    }\n    if (changeValue.lt(BNZero)) {\n        throw new SDKError(ERROR_CODE.NOT_ENOUGH_BTC_TO_SEND);\n    }\n    // Change utxo\n    if (changeValue.gt(BNZero)) {\n        if (changeValue.gte(MinSats)) {\n            psbt.addOutput({\n                address: buyerAddress,\n                value: changeValue.toNumber(),\n            });\n        }\n        else {\n            fee = fee.plus(changeValue);\n        }\n    }\n    // sign tx\n    for (let i = 0; i < psbt.txInputs.length; i++) {\n        if (i === 0 || i > sellerSignedPsbt.txInputs.length) {\n            psbt.signInput(i, tweakedSigner);\n        }\n    }\n    for (let i = 0; i < psbt.txInputs.length; i++) {\n        if (i === 0 || i > sellerSignedPsbt.txInputs.length) {\n            psbt.finalizeInput(i);\n            try {\n                const isValid = psbt.validateSignaturesOfInput(i, verifySchnorr, tweakedSigner.publicKey);\n                if (!isValid) {\n                    console.log(\"Tx signature is invalid \" + i);\n                }\n            }\n            catch (e) {\n                console.log(\"Tx signature is invalid \" + i);\n            }\n        }\n    }\n    // get tx hex\n    const tx = psbt.extractTransaction();\n    console.log(\"Transaction : \", tx);\n    const txHex = tx.toHex();\n    return { txID: tx.getId(), txHex, fee, selectedUTXOs: [...paymentUtxos, dummyUtxo], changeAmount: changeValue, tx };\n};\n/**\n* createRawPSBTToBuy creates the raw partially signed bitcoin transaction to buy the inscription (not signed yet).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerSignedPsbt PSBT from seller\n* @param internalPubKey buffer public key of the buyer\n* @param receiverInscriptionAddress payment address of the buyer to receive inscription\n* @param valueInscription value in inscription\n* @param price price of the inscription that the seller wants to sell (in satoshi)\n* @param paymentUtxos cardinal input coins to payment\n* @param dummyUtxo cardinal dummy input coin\n* @returns the encoded base64 psbt\n*/\nconst createRawPSBTToBuy = ({ sellerSignedPsbt, internalPubKey, receiverInscriptionAddress, valueInscription, price, paymentUtxos, dummyUtxo, feeRate, }) => {\n    const psbt = new Psbt({ network: Network });\n    let totalValue = BNZero;\n    const { p2pktr, address: buyerAddress } = generateTaprootAddressFromPubKey(internalPubKey);\n    // Add dummy utxo to the first input coin\n    psbt.addInput({\n        hash: dummyUtxo.tx_hash,\n        index: dummyUtxo.tx_output_n,\n        witnessUtxo: { value: dummyUtxo.value.toNumber(), script: p2pktr.output },\n        tapInternalKey: internalPubKey,\n    });\n    // Add inscription output\n    // the frist output coin has value equal to the sum of dummy value and value inscription\n    // this makes sure the first output coin is inscription outcoin \n    psbt.addOutput({\n        address: receiverInscriptionAddress,\n        value: dummyUtxo.value.plus(valueInscription).toNumber(),\n    });\n    if (sellerSignedPsbt.txInputs.length !== sellerSignedPsbt.txOutputs.length) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Length of inputs and outputs in seller psbt must not be different.\");\n    }\n    for (let i = 0; i < sellerSignedPsbt.txInputs.length; i++) {\n        // Add seller signed input\n        psbt.addInput({\n            ...sellerSignedPsbt.txInputs[i],\n            ...sellerSignedPsbt.data.inputs[i]\n        });\n        // Add seller output\n        psbt.addOutput({\n            ...sellerSignedPsbt.txOutputs[i],\n        });\n    }\n    // Add payment utxo inputs\n    for (const utxo of paymentUtxos) {\n        psbt.addInput({\n            hash: utxo.tx_hash,\n            index: utxo.tx_output_n,\n            witnessUtxo: { value: utxo.value.toNumber(), script: p2pktr.output },\n            tapInternalKey: internalPubKey,\n        });\n        totalValue = totalValue.plus(utxo.value);\n    }\n    let fee = new BigNumber(estimateTxFee(psbt.txInputs.length, psbt.txOutputs.length, feeRate));\n    if (fee.plus(price).gt(totalValue)) {\n        fee = totalValue.minus(price); // maximum fee can paid\n        if (fee.lt(BNZero)) {\n            throw new SDKError(ERROR_CODE.NOT_ENOUGH_BTC_TO_PAY_FEE);\n        }\n    }\n    let changeValue = totalValue.minus(price).minus(fee);\n    if (changeValue.gte(DummyUTXOValue)) {\n        // Create a new dummy utxo output for the next purchase\n        psbt.addOutput({\n            address: buyerAddress,\n            value: DummyUTXOValue,\n        });\n        changeValue = changeValue.minus(DummyUTXOValue);\n        const extraFee = new BigNumber(OutputSize * feeRate);\n        if (changeValue.gte(extraFee)) {\n            changeValue = changeValue.minus(extraFee);\n            fee = fee.plus(extraFee);\n        }\n    }\n    if (changeValue.lt(BNZero)) {\n        throw new SDKError(ERROR_CODE.NOT_ENOUGH_BTC_TO_SEND);\n    }\n    // Change utxo\n    if (changeValue.gt(BNZero)) {\n        if (changeValue.gte(MinSats)) {\n            psbt.addOutput({\n                address: buyerAddress,\n                value: changeValue.toNumber(),\n            });\n        }\n        else {\n            fee = fee.plus(changeValue);\n            changeValue = BNZero;\n        }\n    }\n    const indicesToSign = [];\n    for (let i = 0; i < psbt.txInputs.length; i++) {\n        if (i === 0 || i > sellerSignedPsbt.txInputs.length) {\n            indicesToSign.push(i);\n        }\n    }\n    return { base64Psbt: psbt.toBase64(), selectedUTXOs: [...paymentUtxos, dummyUtxo], indicesToSign, fee: fee, changeAmount: changeValue };\n};\n/**\n* createPSBTToBuy creates the partially signed bitcoin transaction to buy the inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerSignedPsbt PSBT from seller\n* @param buyerPrivateKey buffer private key of the buyer\n* @param buyerAddress payment address of the buy to receive inscription\n* @param valueInscription value in inscription\n* @param price price of the inscription that the seller wants to sell (in satoshi)\n* @param paymentUtxos cardinal input coins to payment\n* @param dummyUtxo cardinal dummy input coin\n* @returns the encoded base64 partially signed transaction\n*/\nconst createPSBTToBuyMultiInscriptions = ({ buyReqFullInfos, buyerPrivateKey, feeUTXOs, fee, dummyUTXO, feeRatePerByte, }) => {\n    // validation\n    if (buyReqFullInfos.length === 0) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"buyReqFullInfos is empty\");\n    }\n    const psbt = new Psbt({ network: Network });\n    const indexInputNeedToSign = [];\n    const selectedUTXOs = [];\n    const { keyPair, tweakedSigner, p2pktr, senderAddress: buyerAddress } = generateTaprootKeyPair(buyerPrivateKey);\n    // Add dummy utxo to the first input coin\n    psbt.addInput({\n        hash: dummyUTXO.tx_hash,\n        index: dummyUTXO.tx_output_n,\n        witnessUtxo: { value: dummyUTXO.value.toNumber(), script: p2pktr.output },\n        tapInternalKey: toXOnly(keyPair.publicKey),\n    });\n    indexInputNeedToSign.push(0);\n    selectedUTXOs.push(dummyUTXO);\n    // Add the first inscription output\n    // the frist output coin has value equal to the sum of dummy value and value inscription\n    // this makes sure the first output coin is inscription outcoin \n    const theFirstBuyReq = buyReqFullInfos[0];\n    psbt.addOutput({\n        address: theFirstBuyReq.receiverInscriptionAddress,\n        value: dummyUTXO.value.plus(theFirstBuyReq.valueInscription).toNumber(),\n    });\n    for (let i = 0; i < buyReqFullInfos.length; i++) {\n        const info = buyReqFullInfos[i];\n        const sellerSignedPsbt = info.sellerSignedPsbt;\n        const paymentUTXO = info.paymentUTXO;\n        if (sellerSignedPsbt.txInputs.length !== sellerSignedPsbt.txOutputs.length) {\n            throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Length of inputs and outputs in seller psbt must not be different.\");\n        }\n        for (let i = 0; i < sellerSignedPsbt.txInputs.length; i++) {\n            // Add seller signed input\n            psbt.addInput({\n                ...sellerSignedPsbt.txInputs[i],\n                ...sellerSignedPsbt.data.inputs[i]\n            });\n            // Add seller output\n            psbt.addOutput({\n                ...sellerSignedPsbt.txOutputs[i],\n            });\n        }\n        // add payment utxo input\n        psbt.addInput({\n            hash: paymentUTXO.tx_hash,\n            index: paymentUTXO.tx_output_n,\n            witnessUtxo: { value: paymentUTXO.value.toNumber(), script: p2pktr.output },\n            tapInternalKey: toXOnly(keyPair.publicKey),\n        });\n        indexInputNeedToSign.push(psbt.txInputs.length - 1);\n        selectedUTXOs.push(paymentUTXO);\n        // add receiver next inscription output\n        if (i < buyReqFullInfos.length - 1) {\n            const theNextBuyReq = buyReqFullInfos[i + 1];\n            psbt.addOutput({\n                address: theNextBuyReq.receiverInscriptionAddress,\n                value: theNextBuyReq.valueInscription.toNumber(),\n            });\n        }\n    }\n    // add utxo for pay fee\n    let totalAmountFeeUTXOs = BNZero;\n    for (const utxo of feeUTXOs) {\n        psbt.addInput({\n            hash: utxo.tx_hash,\n            index: utxo.tx_output_n,\n            witnessUtxo: { value: utxo.value.toNumber(), script: p2pktr.output },\n            tapInternalKey: toXOnly(keyPair.publicKey),\n        });\n        indexInputNeedToSign.push(psbt.txInputs.length - 1);\n        totalAmountFeeUTXOs = totalAmountFeeUTXOs.plus(utxo.value);\n    }\n    selectedUTXOs.push(...feeUTXOs);\n    // let fee = new BigNumber(estimateTxFee(psbt.txInputs.length, psbt.txOutputs.length, feeRate));\n    if (fee.gt(totalAmountFeeUTXOs)) {\n        fee = totalAmountFeeUTXOs; // maximum fee can paid\n    }\n    let changeValue = totalAmountFeeUTXOs.minus(fee);\n    if (changeValue.gte(DummyUTXOValue)) {\n        // Create a new dummy utxo output for the next purchase\n        psbt.addOutput({\n            address: buyerAddress,\n            value: DummyUTXOValue,\n        });\n        changeValue = changeValue.minus(DummyUTXOValue);\n        const extraFee = new BigNumber(OutputSize * feeRatePerByte);\n        if (changeValue.gte(extraFee)) {\n            changeValue = changeValue.minus(extraFee);\n            fee = fee.plus(extraFee);\n        }\n    }\n    if (changeValue.lt(BNZero)) {\n        throw new SDKError(ERROR_CODE.NOT_ENOUGH_BTC_TO_SEND);\n    }\n    // Change utxo\n    if (changeValue.gt(BNZero)) {\n        if (changeValue.gte(MinSats)) {\n            psbt.addOutput({\n                address: buyerAddress,\n                value: changeValue.toNumber(),\n            });\n        }\n        else {\n            fee = fee.plus(changeValue);\n            changeValue = BNZero;\n        }\n    }\n    console.log(\"indexInputNeedToSign: \", indexInputNeedToSign);\n    // sign tx\n    for (let i = 0; i < psbt.txInputs.length; i++) {\n        if (indexInputNeedToSign.findIndex(value => value === i) !== -1) {\n            psbt.signInput(i, tweakedSigner);\n        }\n    }\n    for (let i = 0; i < psbt.txInputs.length; i++) {\n        if (indexInputNeedToSign.findIndex(value => value === i) !== -1) {\n            psbt.finalizeInput(i);\n            try {\n                const isValid = psbt.validateSignaturesOfInput(i, verifySchnorr, tweakedSigner.publicKey);\n                if (!isValid) {\n                    console.log(\"Tx signature is invalid \" + i);\n                }\n            }\n            catch (e) {\n                console.log(\"Tx signature is invalid \" + i);\n            }\n        }\n    }\n    // get tx hex\n    const tx = psbt.extractTransaction();\n    console.log(\"Transaction : \", tx);\n    const txHex = tx.toHex();\n    return { txID: tx.getId(), txHex, fee, selectedUTXOs, changeAmount: changeValue, tx, };\n};\n/**\n* createRawPSBTToBuyMultiInscriptions creates the partially signed bitcoin transaction to buy multiple inscriptions.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerSignedPsbt PSBT from seller\n* @param internalPubKey buffer public key of the buyer\n* @param buyerAddress payment address of the buy to receive inscription\n* @param valueInscription value in inscription\n* @param price price of the inscription that the seller wants to sell (in satoshi)\n* @param paymentUtxos cardinal input coins to payment\n* @param dummyUtxo cardinal dummy input coin\n* @returns the encoded base64 partially signed transaction\n*/\nconst createRawPSBTToBuyMultiInscriptions = ({ buyReqFullInfos, internalPubKey, feeUTXOs, fee, dummyUTXO, feeRatePerByte, }) => {\n    // validation\n    if (buyReqFullInfos.length === 0) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"buyReqFullInfos is empty\");\n    }\n    const psbt = new Psbt({ network: Network });\n    const indexInputNeedToSign = [];\n    const selectedUTXOs = [];\n    const { p2pktr, address: buyerAddress } = generateTaprootAddressFromPubKey(internalPubKey);\n    // Add dummy utxo to the first input coin\n    psbt.addInput({\n        hash: dummyUTXO.tx_hash,\n        index: dummyUTXO.tx_output_n,\n        witnessUtxo: { value: dummyUTXO.value.toNumber(), script: p2pktr.output },\n        tapInternalKey: internalPubKey,\n    });\n    indexInputNeedToSign.push(0);\n    selectedUTXOs.push(dummyUTXO);\n    // Add the first inscription output\n    // the frist output coin has value equal to the sum of dummy value and value inscription\n    // this makes sure the first output coin is inscription outcoin \n    const theFirstBuyReq = buyReqFullInfos[0];\n    psbt.addOutput({\n        address: theFirstBuyReq.receiverInscriptionAddress,\n        value: dummyUTXO.value.plus(theFirstBuyReq.valueInscription).toNumber(),\n    });\n    for (let i = 0; i < buyReqFullInfos.length; i++) {\n        const info = buyReqFullInfos[i];\n        const sellerSignedPsbt = info.sellerSignedPsbt;\n        const paymentUTXO = info.paymentUTXO;\n        if (sellerSignedPsbt.txInputs.length !== sellerSignedPsbt.txOutputs.length) {\n            throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Length of inputs and outputs in seller psbt must not be different.\");\n        }\n        for (let i = 0; i < sellerSignedPsbt.txInputs.length; i++) {\n            // Add seller signed input\n            psbt.addInput({\n                ...sellerSignedPsbt.txInputs[i],\n                ...sellerSignedPsbt.data.inputs[i]\n            });\n            // Add seller output\n            psbt.addOutput({\n                ...sellerSignedPsbt.txOutputs[i],\n            });\n        }\n        // add payment utxo input\n        psbt.addInput({\n            hash: paymentUTXO.tx_hash,\n            index: paymentUTXO.tx_output_n,\n            witnessUtxo: { value: paymentUTXO.value.toNumber(), script: p2pktr.output },\n            tapInternalKey: internalPubKey,\n        });\n        indexInputNeedToSign.push(psbt.txInputs.length - 1);\n        selectedUTXOs.push(paymentUTXO);\n        // add receiver next inscription output\n        if (i < buyReqFullInfos.length - 1) {\n            const theNextBuyReq = buyReqFullInfos[i + 1];\n            psbt.addOutput({\n                address: theNextBuyReq.receiverInscriptionAddress,\n                value: theNextBuyReq.valueInscription.toNumber(),\n            });\n        }\n    }\n    // add utxo for pay fee\n    let totalAmountFeeUTXOs = BNZero;\n    for (const utxo of feeUTXOs) {\n        psbt.addInput({\n            hash: utxo.tx_hash,\n            index: utxo.tx_output_n,\n            witnessUtxo: { value: utxo.value.toNumber(), script: p2pktr.output },\n            tapInternalKey: internalPubKey,\n        });\n        indexInputNeedToSign.push(psbt.txInputs.length - 1);\n        totalAmountFeeUTXOs = totalAmountFeeUTXOs.plus(utxo.value);\n    }\n    selectedUTXOs.push(...feeUTXOs);\n    // let fee = new BigNumber(estimateTxFee(psbt.txInputs.length, psbt.txOutputs.length, feeRate));\n    if (fee.gt(totalAmountFeeUTXOs)) {\n        fee = totalAmountFeeUTXOs; // maximum fee can paid\n    }\n    let changeValue = totalAmountFeeUTXOs.minus(fee);\n    if (changeValue.gte(DummyUTXOValue)) {\n        // Create a new dummy utxo output for the next purchase\n        psbt.addOutput({\n            address: buyerAddress,\n            value: DummyUTXOValue,\n        });\n        changeValue = changeValue.minus(DummyUTXOValue);\n        const extraFee = new BigNumber(OutputSize * feeRatePerByte);\n        if (changeValue.gte(extraFee)) {\n            changeValue = changeValue.minus(extraFee);\n            fee = fee.plus(extraFee);\n        }\n    }\n    if (changeValue.lt(BNZero)) {\n        throw new SDKError(ERROR_CODE.NOT_ENOUGH_BTC_TO_SEND);\n    }\n    // Change utxo\n    if (changeValue.gt(BNZero)) {\n        if (changeValue.gte(MinSats)) {\n            psbt.addOutput({\n                address: buyerAddress,\n                value: changeValue.toNumber(),\n            });\n        }\n        else {\n            fee = fee.plus(changeValue);\n            changeValue = BNZero;\n        }\n    }\n    console.log(\"indexInputNeedToSign: \", indexInputNeedToSign);\n    return { base64Psbt: psbt.toBase64(), selectedUTXOs, indicesToSign: indexInputNeedToSign, fee, changeAmount: changeValue };\n};\n/**\n* reqListForSaleInscription creates the PSBT of the seller to list for sale inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerPrivateKey buffer private key of the seller\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the seller\n* @param sellInscriptionID id of inscription to sell\n* @param receiverBTCAddress the seller's address to receive BTC\n* @param amountPayToSeller BTC amount to pay to seller\n* @param feePayToCreator BTC fee to pay to creator\n* @param creatorAddress address of creator\n* amountPayToSeller + feePayToCreator = price that is showed on UI\n* @returns the base64 encode Psbt\n*/\nconst reqListForSaleInscription = async (params) => {\n    const { sellerPrivateKey, utxos, inscriptions, sellInscriptionID, receiverBTCAddress, feeRatePerByte } = params;\n    let { amountPayToSeller, feePayToCreator, creatorAddress, } = params;\n    // validation\n    if (feePayToCreator.gt(BNZero) && creatorAddress === \"\") {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Creator address must not be empty.\");\n    }\n    if (sellInscriptionID === \"\") {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"SellInscriptionID must not be empty.\");\n    }\n    if (receiverBTCAddress === \"\") {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"receiverBTCAddress must not be empty.\");\n    }\n    if (amountPayToSeller.eq(BNZero)) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"amountPayToSeller must be greater than zero.\");\n    }\n    let needDummyUTXO = false;\n    if (feePayToCreator.gt(BNZero)) {\n        // creator is the selller\n        if (creatorAddress !== receiverBTCAddress) {\n            needDummyUTXO = true;\n        }\n        else {\n            // create only one output, don't need to create 2 outputs\n            amountPayToSeller = amountPayToSeller.plus(feePayToCreator);\n            creatorAddress = \"\";\n            feePayToCreator = BNZero;\n        }\n    }\n    if (amountPayToSeller.lt(MinSats)) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"amountPayToSeller must not be less than \" + fromSat(MinSats) + \" BTC.\");\n    }\n    if (feePayToCreator.gt(BNZero) && feePayToCreator.lt(MinSats)) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"feePayToCreator must not be less than \" + fromSat(MinSats) + \" BTC.\");\n    }\n    // select inscription UTXO\n    const { inscriptionUTXO, inscriptionInfo } = selectInscriptionUTXO(utxos, inscriptions, sellInscriptionID);\n    let newInscriptionUTXO = inscriptionUTXO;\n    // select dummy UTXO \n    // if there is no dummy UTXO, we have to create and broadcast the tx to split dummy UTXO first\n    let dummyUTXORes;\n    let selectedUTXOs = [];\n    let splitTxID = \"\";\n    let splitTxRaw = \"\";\n    if (needDummyUTXO) {\n        try {\n            // create dummy UTXO from cardinal UTXOs\n            const res = await createDummyUTXOFromCardinal(sellerPrivateKey, utxos, inscriptions, feeRatePerByte);\n            dummyUTXORes = res.dummyUTXO;\n            selectedUTXOs = res.selectedUTXOs;\n            splitTxID = res.splitTxID;\n            splitTxRaw = res.txHex;\n        }\n        catch (e) {\n            // create dummy UTXO from inscription UTXO\n            const { txID, txHex, newValueInscription } = createTxSplitFundFromOrdinalUTXO(sellerPrivateKey, inscriptionUTXO, inscriptionInfo, new BigNumber(DummyUTXOValue), feeRatePerByte);\n            splitTxID = txID;\n            splitTxRaw = txHex;\n            newInscriptionUTXO = {\n                tx_hash: txID,\n                tx_output_n: 0,\n                value: newValueInscription,\n            };\n            dummyUTXORes = {\n                tx_hash: txID,\n                tx_output_n: 1,\n                value: new BigNumber(DummyUTXOValue),\n            };\n        }\n    }\n    console.log(\"sell splitTxID: \", splitTxID);\n    console.log(\"sell dummyUTXORes: \", dummyUTXORes);\n    console.log(\"sell newInscriptionUTXO: \", newInscriptionUTXO);\n    const base64Psbt = createPSBTToSell({\n        inscriptionUTXO: newInscriptionUTXO,\n        amountPayToSeller: amountPayToSeller,\n        receiverBTCAddress: receiverBTCAddress,\n        sellerPrivateKey: sellerPrivateKey,\n        dummyUTXO: dummyUTXORes,\n        creatorAddress: creatorAddress,\n        feePayToCreator: feePayToCreator,\n    });\n    const inscriptionUTXOs = [inscriptionUTXO];\n    if (dummyUTXORes !== null) {\n        inscriptionUTXOs.push(dummyUTXORes);\n    }\n    return { base64Psbt, selectedUTXOs: inscriptionUTXOs, splitTxID, splitUTXOs: selectedUTXOs, splitTxRaw: splitTxRaw };\n};\n/**\n* reqListForSaleInscFromAnyWallet creates the PSBT of the seller to list for sale inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerPrivateKey buffer private key of the seller\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the seller\n* @param sellInscriptionID id of inscription to sell\n* @param receiverBTCAddress the seller's address to receive BTC\n* @param amountPayToSeller BTC amount to pay to seller\n* @param feePayToCreator BTC fee to pay to creator\n* @param creatorAddress address of creator\n* amountPayToSeller + feePayToCreator = price that is showed on UI\n* @returns the base64 encode Psbt\n*/\nconst reqListForSaleInscFromAnyWallet = async ({ pubKey, utxos, inscriptions, sellInscriptionID, receiverBTCAddress, amountPayToSeller, feePayToCreator, creatorAddress, feeRatePerByte, walletType = WalletType.Xverse, cancelFn, }) => {\n    // validation\n    if (feePayToCreator.gt(BNZero) && creatorAddress === \"\") {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Creator address must not be empty.\");\n    }\n    if (sellInscriptionID === \"\") {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"SellInscriptionID must not be empty.\");\n    }\n    if (receiverBTCAddress === \"\") {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"receiverBTCAddress must not be empty.\");\n    }\n    if (amountPayToSeller.eq(BNZero)) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"amountPayToSeller must be greater than zero.\");\n    }\n    let needDummyUTXO = false;\n    if (feePayToCreator.gt(BNZero)) {\n        // creator is the selller\n        if (creatorAddress !== receiverBTCAddress) {\n            needDummyUTXO = true;\n        }\n        else {\n            // create only one output, don't need to create 2 outputs\n            amountPayToSeller = amountPayToSeller.plus(feePayToCreator);\n            creatorAddress = \"\";\n            feePayToCreator = BNZero;\n        }\n    }\n    if (amountPayToSeller.lt(MinSats)) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"amountPayToSeller must not be less than \" + fromSat(MinSats) + \" BTC.\");\n    }\n    if (feePayToCreator.gt(BNZero) && feePayToCreator.lt(MinSats)) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"feePayToCreator must not be less than \" + fromSat(MinSats) + \" BTC.\");\n    }\n    const { address } = generateTaprootAddressFromPubKey(pubKey);\n    // select inscription UTXO\n    const { inscriptionUTXO, inscriptionInfo } = selectInscriptionUTXO(utxos, inscriptions, sellInscriptionID);\n    let newInscriptionUTXO = inscriptionUTXO;\n    // select dummy UTXO \n    // if there is no dummy UTXO, we have to create and broadcast the tx to split dummy UTXO first\n    let dummyUTXORes;\n    let selectedUTXOsRes = [];\n    let splitTxID = \"\";\n    let splitTxRaw = \"\";\n    if (needDummyUTXO) {\n        const { dummyUTXO, splitPsbtB64, indicesToSign, selectedUTXOs, newValueInscription } = createRawTxDummyUTXOForSale({\n            pubKey,\n            utxos,\n            inscriptions,\n            sellInscriptionID,\n            feeRatePerByte,\n        });\n        if (dummyUTXO !== undefined && dummyUTXO !== null && dummyUTXO.tx_hash !== \"\") {\n            // select an available dummy UTXO\n            dummyUTXORes = dummyUTXO;\n        }\n        else {\n            // need to create split tx \n            // sign transaction \n            const { base64SignedPsbt, msgTx, msgTxID, msgTxHex } = await handleSignPsbtWithSpecificWallet({\n                base64Psbt: splitPsbtB64,\n                indicesToSign,\n                address,\n                isGetMsgTx: true,\n                walletType,\n                cancelFn\n            });\n            splitTxID = msgTxID;\n            splitTxRaw = msgTxHex;\n            selectedUTXOsRes = selectedUTXOs;\n            if (newValueInscription.eq(BNZero)) {\n                // split from cardinal\n                dummyUTXORes = {\n                    tx_hash: splitTxID,\n                    tx_output_n: 0,\n                    value: new BigNumber(DummyUTXOValue),\n                };\n                newInscriptionUTXO = inscriptionUTXO;\n            }\n            else {\n                // split from ordinal\n                newInscriptionUTXO = {\n                    tx_hash: splitTxID,\n                    tx_output_n: 0,\n                    value: newValueInscription,\n                };\n                dummyUTXORes = {\n                    tx_hash: splitTxID,\n                    tx_output_n: 1,\n                    value: new BigNumber(DummyUTXOValue),\n                };\n            }\n        }\n    }\n    console.log(\"sell splitTxID: \", splitTxID);\n    console.log(\"sell dummyUTXORes: \", dummyUTXORes);\n    console.log(\"sell newInscriptionUTXO: \", newInscriptionUTXO);\n    const rawPsbtRes = createRawPSBTToSell({\n        inscriptionUTXO: newInscriptionUTXO,\n        amountPayToSeller: amountPayToSeller,\n        receiverBTCAddress: receiverBTCAddress,\n        internalPubKey: pubKey,\n        dummyUTXO: dummyUTXORes,\n        creatorAddress: creatorAddress,\n        feePayToCreator: feePayToCreator,\n    });\n    // sign transaction \n    const { base64SignedPsbt } = await handleSignPsbtWithSpecificWallet({\n        base64Psbt: rawPsbtRes.base64Psbt,\n        indicesToSign: rawPsbtRes.indicesToSign,\n        address,\n        sigHashType: SigHashTypeForSale,\n        walletType,\n        cancelFn\n    });\n    const inscriptionUTXOs = [inscriptionUTXO];\n    if (dummyUTXORes !== null) {\n        inscriptionUTXOs.push(dummyUTXORes);\n    }\n    return { base64Psbt: base64SignedPsbt, selectedUTXOs: inscriptionUTXOs, splitTxID, splitUTXOs: selectedUTXOsRes, splitTxRaw: splitTxRaw };\n};\n/**\n* reqBuyInscription creates the PSBT of the seller to list for sale inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerSignedPsbtB64 buffer private key of the buyer\n* @param buyerPrivateKey buffer private key of the buyer\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the seller\n* @param sellInscriptionID id of inscription to sell\n* @param receiverBTCAddress the seller's address to receive BTC\n* @param price  = amount pay to seller + fee pay to creator\n* @returns the base64 encode Psbt\n*/\nconst reqBuyInscription = async (params) => {\n    var _a;\n    const { sellerSignedPsbtB64, buyerPrivateKey, receiverInscriptionAddress, price, utxos, inscriptions, feeRatePerByte } = params;\n    // decode seller's signed PSBT\n    const sellerSignedPsbt = Psbt.fromBase64(sellerSignedPsbtB64, { network: Network });\n    const sellerInputs = sellerSignedPsbt.data.inputs;\n    if (sellerInputs.length === 0) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Invalid seller's PSBT.\");\n    }\n    const valueInscription = (_a = sellerInputs[0].witnessUtxo) === null || _a === void 0 ? void 0 : _a.value;\n    if (valueInscription === undefined || valueInscription === 0) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Invalid value inscription in seller's PSBT.\");\n    }\n    const newUTXOs = utxos;\n    // select or create dummy UTXO\n    const { dummyUTXO, splitTxID, selectedUTXOs, newUTXO, fee: feeSplitUTXO, txHex: splitTxRaw } = await createDummyUTXOFromCardinal(buyerPrivateKey, utxos, inscriptions, feeRatePerByte);\n    console.log(\"buy dummyUTXO: \", dummyUTXO);\n    console.log(\"buy splitTxID: \", splitTxID);\n    console.log(\"buy selectedUTXOs for split: \", selectedUTXOs);\n    console.log(\"buy newUTXO: \", newUTXO);\n    // remove selected utxo or dummyUTXO, and append new UTXO to list of UTXO to create the next PSBT \n    if (selectedUTXOs.length > 0) {\n        for (const selectedUtxo of selectedUTXOs) {\n            const index = newUTXOs.findIndex((utxo) => utxo.tx_hash === selectedUtxo.tx_hash && utxo.tx_output_n === selectedUtxo.tx_output_n);\n            newUTXOs.splice(index, 1);\n        }\n    }\n    else {\n        const index = newUTXOs.findIndex((utxo) => utxo.tx_hash === dummyUTXO.tx_hash && utxo.tx_output_n === dummyUTXO.tx_output_n);\n        newUTXOs.splice(index, 1);\n    }\n    if (newUTXO !== undefined && newUTXO !== null) {\n        newUTXOs.push(newUTXO);\n    }\n    console.log(\"buy newUTXOs: \", newUTXOs);\n    // select cardinal UTXOs to payment\n    const { selectedUTXOs: paymentUTXOs } = selectUTXOsToCreateBuyTx({ sellerSignedPsbt: sellerSignedPsbt, price: price, utxos: newUTXOs, inscriptions, feeRate: feeRatePerByte });\n    console.log(\"selected UTXOs to buy paymentUTXOs: \", paymentUTXOs);\n    // create PBTS from the seller's one\n    const res = createPSBTToBuy({\n        sellerSignedPsbt: sellerSignedPsbt,\n        buyerPrivateKey: buyerPrivateKey,\n        receiverInscriptionAddress: receiverInscriptionAddress,\n        valueInscription: new BigNumber(valueInscription),\n        price: price,\n        paymentUtxos: paymentUTXOs,\n        dummyUtxo: dummyUTXO,\n        feeRate: feeRatePerByte,\n    });\n    return {\n        tx: res.tx,\n        txID: res === null || res === void 0 ? void 0 : res.txID,\n        txHex: res === null || res === void 0 ? void 0 : res.txHex,\n        fee: res === null || res === void 0 ? void 0 : res.fee.plus(feeSplitUTXO),\n        selectedUTXOs: [...paymentUTXOs, dummyUTXO],\n        splitTxID,\n        splitUTXOs: [...selectedUTXOs],\n        splitTxRaw: splitTxRaw,\n    };\n};\n/**\n* reqBuyInscription creates the PSBT of the seller to list for sale inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerSignedPsbtB64 buffer private key of the buyer\n* @param buyerPrivateKey buffer private key of the buyer\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the seller\n* @param sellInscriptionID id of inscription to sell\n* @param receiverBTCAddress the seller's address to receive BTC\n* @param price  = amount pay to seller + fee pay to creator\n* @returns the base64 encode Psbt\n*/\nconst reqBuyInscriptionFromAnyWallet = async ({ sellerSignedPsbtB64, pubKey, receiverInscriptionAddress, price, utxos, inscriptions, feeRatePerByte, walletType = WalletType.Xverse, cancelFn, }) => {\n    var _a;\n    // decode seller's signed PSBT\n    const sellerSignedPsbt = Psbt.fromBase64(sellerSignedPsbtB64, { network: Network });\n    const sellerInputs = sellerSignedPsbt.data.inputs;\n    if (sellerInputs.length === 0) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Invalid seller's PSBT.\");\n    }\n    const valueInscription = (_a = sellerInputs[0].witnessUtxo) === null || _a === void 0 ? void 0 : _a.value;\n    if (valueInscription === undefined || valueInscription === 0) {\n        throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Invalid value inscription in seller's PSBT.\");\n    }\n    const newUTXOs = utxos;\n    let splitTxID = \"\";\n    let splitTxRaw = \"\";\n    let dummyUTXORes;\n    let newUTXO;\n    const { address } = generateTaprootAddressFromPubKey(pubKey);\n    // select or create dummy UTXO\n    const { dummyUTXO, splitPsbtB64, indicesToSign, selectedUTXOs, changeAmount, fee: feeSplitUTXO } = await createRawTxDummyUTXOFromCardinal(pubKey, utxos, inscriptions, feeRatePerByte);\n    if (dummyUTXO !== undefined && dummyUTXO !== null && dummyUTXO.tx_hash !== \"\") {\n        // select an available dummy UTXO\n        dummyUTXORes = dummyUTXO;\n    }\n    else {\n        // need to create split tx \n        // sign transaction \n        const { base64SignedPsbt, msgTx, msgTxID, msgTxHex } = await handleSignPsbtWithSpecificWallet({\n            base64Psbt: splitPsbtB64,\n            indicesToSign,\n            address,\n            isGetMsgTx: true,\n            walletType,\n            cancelFn\n        });\n        splitTxID = msgTxID;\n        splitTxRaw = msgTxHex;\n        // split from cardinal\n        dummyUTXORes = {\n            tx_hash: splitTxID,\n            tx_output_n: 0,\n            value: new BigNumber(DummyUTXOValue),\n        };\n        if (changeAmount.gt(BNZero)) {\n            newUTXO = {\n                tx_hash: splitTxID,\n                tx_output_n: 1,\n                value: new BigNumber(changeAmount),\n            };\n        }\n    }\n    console.log(\"buy dummyUTXO: \", dummyUTXO);\n    console.log(\"buy splitTxID: \", splitTxID);\n    console.log(\"buy selectedUTXOs for split: \", selectedUTXOs);\n    console.log(\"buy newUTXO: \", newUTXO);\n    // remove selected utxo or dummyUTXO, and append new UTXO to list of UTXO to create the next PSBT \n    if (selectedUTXOs.length > 0) {\n        for (const selectedUtxo of selectedUTXOs) {\n            const index = newUTXOs.findIndex((utxo) => utxo.tx_hash === selectedUtxo.tx_hash && utxo.tx_output_n === selectedUtxo.tx_output_n);\n            newUTXOs.splice(index, 1);\n        }\n    }\n    else {\n        const index = newUTXOs.findIndex((utxo) => utxo.tx_hash === dummyUTXO.tx_hash && utxo.tx_output_n === dummyUTXO.tx_output_n);\n        newUTXOs.splice(index, 1);\n    }\n    if (newUTXO !== undefined && newUTXO !== null) {\n        newUTXOs.push(newUTXO);\n    }\n    console.log(\"buy newUTXOs: \", newUTXOs);\n    // select cardinal UTXOs to payment\n    const { selectedUTXOs: paymentUTXOs } = selectUTXOsToCreateBuyTx({ sellerSignedPsbt: sellerSignedPsbt, price: price, utxos: newUTXOs, inscriptions, feeRate: feeRatePerByte });\n    console.log(\"selected UTXOs to buy paymentUTXOs: \", paymentUTXOs);\n    // create PBTS from the seller's one\n    const rawBuyRes = createRawPSBTToBuy({\n        sellerSignedPsbt: sellerSignedPsbt,\n        internalPubKey: pubKey,\n        receiverInscriptionAddress: receiverInscriptionAddress,\n        valueInscription: new BigNumber(valueInscription),\n        price: price,\n        paymentUtxos: paymentUTXOs,\n        dummyUtxo: dummyUTXORes,\n        feeRate: feeRatePerByte,\n    });\n    // sign transaction \n    const { base64SignedPsbt, msgTx, msgTxID, msgTxHex } = await handleSignPsbtWithSpecificWallet({\n        base64Psbt: rawBuyRes.base64Psbt,\n        indicesToSign: rawBuyRes.indicesToSign,\n        address,\n        isGetMsgTx: true,\n        walletType,\n        cancelFn\n    });\n    return {\n        tx: msgTx,\n        txID: msgTxID,\n        txHex: msgTxHex,\n        fee: rawBuyRes.fee.plus(feeSplitUTXO),\n        selectedUTXOs: [...paymentUTXOs, dummyUTXORes],\n        splitTxID,\n        splitUTXOs: [...selectedUTXOs],\n        splitTxRaw: splitTxRaw,\n    };\n};\n/**\n* reqBuyInscription creates the PSBT of the seller to list for sale inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerSignedPsbtB64 buffer private key of the buyer\n* @param buyerPrivateKey buffer private key of the buyer\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the seller\n* @param sellInscriptionID id of inscription to sell\n* @param receiverBTCAddress the seller's address to receive BTC\n* @param price  = amount pay to seller + fee pay to creator\n* @returns the base64 encode Psbt\n*/\nconst reqBuyMultiInscriptions = (params) => {\n    var _a;\n    const { buyReqInfos, buyerPrivateKey, utxos, inscriptions, feeRatePerByte } = params;\n    // \n    const { senderAddress: buyerAddress } = generateTaprootKeyPair(buyerPrivateKey);\n    // decode list of seller's signed PSBT\n    let buyReqFullInfos = [];\n    for (let i = 0; i < buyReqInfos.length; i++) {\n        const sellerSignedPsbtB64 = buyReqInfos[i].sellerSignedPsbtB64;\n        const sellerSignedPsbt = Psbt.fromBase64(sellerSignedPsbtB64, { network: Network });\n        const sellerInputs = sellerSignedPsbt.data.inputs;\n        if (sellerInputs.length === 0) {\n            throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Invalid seller's PSBT.\");\n        }\n        const valueInscription = (_a = sellerInputs[0].witnessUtxo) === null || _a === void 0 ? void 0 : _a.value;\n        if (valueInscription === undefined || valueInscription === 0) {\n            throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Invalid value inscription in seller's PSBT.\");\n        }\n        buyReqFullInfos.push({\n            ...buyReqInfos[i],\n            sellerSignedPsbt,\n            valueInscription: new BigNumber(valueInscription),\n            paymentUTXO: null,\n        });\n    }\n    const newUTXOs = [...utxos];\n    // need to split UTXOs correspond to list of prices to payment\n    // and only one dummy UTXO for multiple inscriptions\n    const { buyReqFullInfos: buyReqFullInfosRes, dummyUTXO, splitTxID, selectedUTXOs, newUTXO, fee: feeSplitUTXO, splitTxHex } = prepareUTXOsToBuyMultiInscriptions({ privateKey: buyerPrivateKey, address: buyerAddress, utxos, inscriptions, feeRatePerByte, buyReqFullInfos });\n    buyReqFullInfos = buyReqFullInfosRes;\n    console.log(\"buyReqFullInfos: \", buyReqFullInfos);\n    console.log(\"buyReqInfos: \", buyReqInfos);\n    console.log(\"buy dummyUTXO: \", dummyUTXO);\n    console.log(\"buy splitTxID: \", splitTxID);\n    console.log(\"buy selectedUTXOs for split: \", selectedUTXOs);\n    console.log(\"buy newUTXO: \", newUTXO);\n    // remove selected utxo, payment utxo, dummyUTXO, and append new UTXO to list of UTXO to create the next PSBT\n    const tmpSelectedUTXOs = [...selectedUTXOs];\n    for (const info of buyReqFullInfos) {\n        tmpSelectedUTXOs.push(info.paymentUTXO);\n    }\n    tmpSelectedUTXOs.push(dummyUTXO);\n    for (const selectedUtxo of tmpSelectedUTXOs) {\n        const index = newUTXOs.findIndex((utxo) => utxo.tx_hash === selectedUtxo.tx_hash && utxo.tx_output_n === selectedUtxo.tx_output_n);\n        if (index !== -1) {\n            newUTXOs.splice(index, 1);\n        }\n    }\n    if (newUTXO !== undefined && newUTXO !== null) {\n        newUTXOs.push(newUTXO);\n    }\n    console.log(\"buy newUTXOs: \", newUTXOs);\n    // estimate fee\n    let numIns = 2 + buyReqFullInfos.length; // one for dummy utxo, one for network fee\n    let numOuts = 1 + buyReqFullInfos.length; // one for change value\n    for (const info of buyReqFullInfos) {\n        numIns += info.sellerSignedPsbt.txInputs.length;\n        numOuts += info.sellerSignedPsbt.txOutputs.length;\n    }\n    let fee = new BigNumber(estimateTxFee(numIns, numOuts, feeRatePerByte));\n    // select cardinal UTXOs to pay fee\n    console.log(\"BUY Fee estimate: \", fee.toNumber());\n    const { selectedUTXOs: feeSelectedUTXOs, totalInputAmount } = selectCardinalUTXOs(newUTXOs, {}, fee);\n    // create PBTS from the seller's one\n    const res = createPSBTToBuyMultiInscriptions({\n        buyReqFullInfos,\n        buyerPrivateKey: buyerPrivateKey,\n        feeUTXOs: feeSelectedUTXOs,\n        fee,\n        dummyUTXO,\n        feeRatePerByte,\n    });\n    fee = res.fee;\n    return {\n        tx: res.tx,\n        txID: res === null || res === void 0 ? void 0 : res.txID,\n        txHex: res === null || res === void 0 ? void 0 : res.txHex,\n        fee: res === null || res === void 0 ? void 0 : res.fee.plus(feeSplitUTXO),\n        selectedUTXOs: res.selectedUTXOs,\n        splitTxID,\n        splitUTXOs: [...selectedUTXOs],\n        splitTxRaw: splitTxHex,\n    };\n};\n/**\n* reqBuyInscription creates the PSBT of the seller to list for sale inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerSignedPsbtB64 buffer private key of the buyer\n* @param buyerPrivateKey buffer private key of the buyer\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the seller\n* @param sellInscriptionID id of inscription to sell\n* @param receiverBTCAddress the seller's address to receive BTC\n* @param price  = amount pay to seller + fee pay to creator\n* @returns the base64 encode Psbt\n*/\nconst reqBuyMultiInscriptionsFromAnyWallet = async ({ buyReqInfos, pubKey, utxos, inscriptions, feeRatePerByte, walletType = WalletType.Xverse, cancelFn, }) => {\n    var _a;\n    const { address: buyerAddress } = generateTaprootAddressFromPubKey(pubKey);\n    // decode list of seller's signed PSBT\n    let buyReqFullInfos = [];\n    for (let i = 0; i < buyReqInfos.length; i++) {\n        const sellerSignedPsbtB64 = buyReqInfos[i].sellerSignedPsbtB64;\n        const sellerSignedPsbt = Psbt.fromBase64(sellerSignedPsbtB64, { network: Network });\n        const sellerInputs = sellerSignedPsbt.data.inputs;\n        if (sellerInputs.length === 0) {\n            throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Invalid seller's PSBT.\");\n        }\n        const valueInscription = (_a = sellerInputs[0].witnessUtxo) === null || _a === void 0 ? void 0 : _a.value;\n        if (valueInscription === undefined || valueInscription === 0) {\n            throw new SDKError(ERROR_CODE.INVALID_PARAMS, \"Invalid value inscription in seller's PSBT.\");\n        }\n        buyReqFullInfos.push({\n            ...buyReqInfos[i],\n            sellerSignedPsbt,\n            valueInscription: new BigNumber(valueInscription),\n            paymentUTXO: null,\n        });\n    }\n    const newUTXOs = [...utxos];\n    // need to split UTXOs correspond to list of prices to payment\n    // and only one dummy UTXO for multiple inscriptions\n    const { buyReqFullInfos: buyReqFullInfosRes, dummyUTXO, splitPsbtB64, selectedUTXOs, fee: feeSplitUTXO, changeAmount, needCreateDummyUTXO, needPaymentUTXOs, indicesToSign, } = createRawTxToPrepareUTXOsToBuyMultiInscs({\n        pubKey: pubKey, address: buyerAddress, utxos, inscriptions, feeRatePerByte, buyReqFullInfos\n    });\n    // sign transaction \n    const { base64SignedPsbt, msgTx, msgTxID, msgTxHex } = await handleSignPsbtWithSpecificWallet({\n        base64Psbt: splitPsbtB64,\n        indicesToSign: indicesToSign,\n        address: buyerAddress,\n        isGetMsgTx: true,\n        walletType,\n        cancelFn\n    });\n    const splitTxID = msgTxID;\n    const splitTxHex = msgTxHex;\n    let dummyUTXORes = dummyUTXO;\n    let newUTXO;\n    for (let i = 0; i < needPaymentUTXOs.length; i++) {\n        const info = needPaymentUTXOs[i];\n        const buyInfoIndex = info.buyInfoIndex;\n        if (buyReqFullInfos[buyInfoIndex].paymentUTXO != null) {\n            throw new SDKError(ERROR_CODE.INVALID_CODE);\n        }\n        const newUTXO = {\n            tx_hash: splitTxID,\n            tx_output_n: i,\n            value: info.amount,\n        };\n        buyReqFullInfos[buyInfoIndex].paymentUTXO = newUTXO;\n    }\n    if (needCreateDummyUTXO) {\n        dummyUTXORes = {\n            tx_hash: splitTxID,\n            tx_output_n: needPaymentUTXOs.length,\n            value: new BigNumber(DummyUTXOValue),\n        };\n    }\n    if (changeAmount.gt(BNZero)) {\n        const indexChangeUTXO = needCreateDummyUTXO ? needPaymentUTXOs.length + 1 : needPaymentUTXOs.length;\n        newUTXO = {\n            tx_hash: splitTxID,\n            tx_output_n: indexChangeUTXO,\n            value: changeAmount,\n        };\n    }\n    buyReqFullInfos = buyReqFullInfosRes;\n    console.log(\"buyReqFullInfos: \", buyReqFullInfos);\n    console.log(\"buyReqInfos: \", buyReqInfos);\n    console.log(\"buy dummyUTXO: \", dummyUTXO);\n    console.log(\"buy splitTxID: \", splitTxID);\n    console.log(\"buy selectedUTXOs for split: \", selectedUTXOs);\n    console.log(\"buy newUTXO: \", newUTXO);\n    // remove selected utxo, payment utxo, dummyUTXO, and append new UTXO to list of UTXO to create the next PSBT\n    const tmpSelectedUTXOs = [...selectedUTXOs];\n    for (const info of buyReqFullInfos) {\n        tmpSelectedUTXOs.push(info.paymentUTXO);\n    }\n    tmpSelectedUTXOs.push(dummyUTXO);\n    for (const selectedUtxo of tmpSelectedUTXOs) {\n        const index = newUTXOs.findIndex((utxo) => utxo.tx_hash === selectedUtxo.tx_hash && utxo.tx_output_n === selectedUtxo.tx_output_n);\n        if (index !== -1) {\n            newUTXOs.splice(index, 1);\n        }\n    }\n    if (newUTXO !== undefined && newUTXO !== null) {\n        newUTXOs.push(newUTXO);\n    }\n    console.log(\"buy newUTXOs: \", newUTXOs);\n    // estimate fee\n    let numIns = 2 + buyReqFullInfos.length; // one for dummy utxo, one for network fee\n    let numOuts = 1 + buyReqFullInfos.length; // one for change value\n    for (const info of buyReqFullInfos) {\n        numIns += info.sellerSignedPsbt.txInputs.length;\n        numOuts += info.sellerSignedPsbt.txOutputs.length;\n    }\n    let fee = new BigNumber(estimateTxFee(numIns, numOuts, feeRatePerByte));\n    // select cardinal UTXOs to pay fee\n    console.log(\"BUY Fee estimate: \", fee.toNumber());\n    const { selectedUTXOs: feeSelectedUTXOs, totalInputAmount } = selectCardinalUTXOs(newUTXOs, {}, fee);\n    // create PBTS from the seller's one\n    const rawBuyRes = createRawPSBTToBuyMultiInscriptions({\n        buyReqFullInfos,\n        internalPubKey: pubKey,\n        feeUTXOs: feeSelectedUTXOs,\n        fee,\n        dummyUTXO: dummyUTXORes,\n        feeRatePerByte,\n    });\n    fee = rawBuyRes.fee;\n    // sign transaction \n    const finalRes = await handleSignPsbtWithSpecificWallet({\n        base64Psbt: rawBuyRes.base64Psbt,\n        indicesToSign: rawBuyRes.indicesToSign,\n        address: buyerAddress,\n        isGetMsgTx: true,\n        walletType,\n        cancelFn\n    });\n    return {\n        tx: finalRes.msgTx,\n        txID: finalRes.msgTxID,\n        txHex: finalRes.msgTxHex,\n        fee: rawBuyRes === null || rawBuyRes === void 0 ? void 0 : rawBuyRes.fee.plus(feeSplitUTXO),\n        selectedUTXOs: rawBuyRes.selectedUTXOs,\n        splitTxID,\n        splitUTXOs: [...selectedUTXOs],\n        splitTxRaw: splitTxHex,\n    };\n};\nexport { createRawPSBTToSell, createPSBTToSell, createPSBTToBuy, reqListForSaleInscription, reqBuyInscription, reqBuyMultiInscriptions, reqListForSaleInscFromAnyWallet, reqBuyInscriptionFromAnyWallet, reqBuyMultiInscriptionsFromAnyWallet };\n//# sourceMappingURL=psbt.js.map","import { ECPair, Network, toXOnly, tweakSigner } from \"../bitcoin\";\nimport SDKError, { ERROR_CODE } from \"../constants/error\";\nimport { payments } from \"bitcoinjs-lib\";\nfunction isPrivateKey(privateKey) {\n    let isValid = false;\n    try {\n        // init key pair from senderPrivateKey\n        const keyPair = ECPair.fromPrivateKey(privateKey);\n        // Tweak the original keypair\n        const tweakedSigner = tweakSigner(keyPair, { network: Network });\n        // Generate an address from the tweaked public key\n        const p2pktr = payments.p2tr({\n            pubkey: toXOnly(tweakedSigner.publicKey),\n            network: Network\n        });\n        const senderAddress = p2pktr.address ? p2pktr.address : \"\";\n        isValid = senderAddress !== \"\";\n    }\n    catch (e) {\n        isValid = false;\n    }\n    return isValid;\n}\nclass Validator {\n    constructor(label, value) {\n        if (!label && typeof label !== \"string\") {\n            throw new SDKError(ERROR_CODE.INVALID_VALIDATOR_LABEL);\n        }\n        this.value = value;\n        this.label = label;\n        this.isRequired = false;\n    }\n    _throwError(message) {\n        throw new Error(`Validating \"${this.label}\" failed: ${message}. Found ${this.value} (type of ${typeof this.value})`);\n    }\n    _isDefined() {\n        return this.value !== null && this.value !== undefined;\n    }\n    _onCondition(condition, message) {\n        if (((!this.isRequired && this._isDefined()) || this.isRequired) &&\n            !condition()) {\n            this._throwError(message);\n        }\n        return this;\n    }\n    required(message = \"Required\") {\n        this.isRequired = true;\n        return this._onCondition(() => this._isDefined(), message);\n    }\n    string(message = \"Must be string\") {\n        return this._onCondition(() => typeof this.value === \"string\", message);\n    }\n    buffer(message = \"Must be buffer\") {\n        return this._onCondition(() => Buffer.isBuffer(this.value), message);\n    }\n    function(message = \"Must be a function\") {\n        return this._onCondition(() => typeof this.value === \"function\", message);\n    }\n    boolean(message = \"Must be boolean\") {\n        return this._onCondition(() => typeof this.value === \"boolean\", message);\n    }\n    number(message = \"Must be number\") {\n        return this._onCondition(() => Number.isFinite(this.value), message);\n    }\n    array(message = \"Must be array\") {\n        return this._onCondition(() => this.value instanceof Array, message);\n    }\n    privateKey(message = \"Invalid private key\") {\n        return this._onCondition(() => this.buffer() && isPrivateKey(this.value), message);\n    }\n}\nexport default Validator;\n//# sourceMappingURL=validator.js.map","import varuint from \"varuint-bitcoin\";\n/**\n * Helper function that produces a serialized witness script\n * https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/csv.spec.ts#L477\n */\nexport function witnessStackToScriptWitness(witness) {\n    let buffer = Buffer.allocUnsafe(0);\n    function writeSlice(slice) {\n        buffer = Buffer.concat([buffer, Buffer.from(slice)]);\n    }\n    function writeVarInt(i) {\n        const currentLen = buffer.length;\n        const varintLen = varuint.encodingLength(i);\n        buffer = Buffer.concat([buffer, Buffer.allocUnsafe(varintLen)]);\n        varuint.encode(i, buffer, currentLen);\n    }\n    function writeVarSlice(slice) {\n        writeVarInt(slice.length);\n        writeSlice(slice);\n    }\n    function writeVector(vector) {\n        writeVarInt(vector.length);\n        vector.forEach(writeVarSlice);\n    }\n    writeVector(witness);\n    return buffer;\n}\n//# sourceMappingURL=witness_stack_to_script_witness.js.map","import { BNZero, InputSize, MinSats, OutputSize } from \"../bitcoin/constants\";\nimport { SDKError, createRawTxSendBTC, createTxSendBTC, estimateTxFee, toSat, } from \"..\";\nimport { ECPair, generateTaprootAddressFromPubKey, generateTaprootKeyPair, toXOnly } from \"../bitcoin/wallet\";\nimport { Psbt, address, payments } from \"bitcoinjs-lib\";\nimport BigNumber from \"bignumber.js\";\nimport { ERROR_CODE } from \"../constants/error\";\nimport { Network } from \"../bitcoin/network\";\nimport { handleSignPsbtWithSpecificWallet } from \"../bitcoin/xverse\";\nimport { witnessStackToScriptWitness } from \"./witness_stack_to_script_witness\";\nconst _ = require(\"underscore\");\nconst remove0x = (data) => {\n    if (data.startsWith(\"0x\"))\n        data = data.slice(2);\n    return data;\n};\nconst createRawRevealTx = ({ internalPubKey, commitTxID, hashLockKeyPair, hashLockRedeem, script_p2tr, revealTxFee }) => {\n    const { p2pktr, address: p2pktr_addr } = generateTaprootAddressFromPubKey(internalPubKey);\n    const tapLeafScript = {\n        leafVersion: hashLockRedeem === null || hashLockRedeem === void 0 ? void 0 : hashLockRedeem.redeemVersion,\n        script: hashLockRedeem === null || hashLockRedeem === void 0 ? void 0 : hashLockRedeem.output,\n        controlBlock: script_p2tr.witness[script_p2tr.witness.length - 1],\n    };\n    const psbt = new Psbt({ network: Network });\n    psbt.addInput({\n        hash: commitTxID,\n        index: 0,\n        witnessUtxo: { value: revealTxFee + MinSats, script: script_p2tr.output },\n        tapLeafScript: [\n            tapLeafScript\n        ]\n    });\n    psbt.addOutput({\n        address: p2pktr_addr,\n        value: MinSats\n    });\n    // const hash_lock_keypair = ECPair.fromWIF(hashLockPriKey);\n    psbt.signInput(0, hashLockKeyPair);\n    // We have to construct our witness script in a custom finalizer\n    const customFinalizer = (_inputIndex, input) => {\n        const scriptSolution = [\n            input.tapScriptSig[0].signature,\n        ];\n        const witness = scriptSolution\n            .concat(tapLeafScript.script)\n            .concat(tapLeafScript.controlBlock);\n        return {\n            finalScriptWitness: witnessStackToScriptWitness(witness)\n        };\n    };\n    psbt.finalizeInput(0, customFinalizer);\n    const revealTX = psbt.extractTransaction();\n    console.log(\"revealTX: \", revealTX);\n    return { revealTxHex: revealTX.toHex(), revealTxID: revealTX.getId() };\n};\nfunction getRevealVirtualSize(hash_lock_redeem, script_p2tr, p2pktr_addr, hash_lock_keypair) {\n    const tapLeafScript = {\n        leafVersion: hash_lock_redeem.redeemVersion,\n        script: hash_lock_redeem.output,\n        controlBlock: script_p2tr.witness[script_p2tr.witness.length - 1]\n    };\n    const psbt = new Psbt({ network: Network });\n    psbt.addInput({\n        hash: \"00\".repeat(32),\n        index: 0,\n        witnessUtxo: { value: 1, script: script_p2tr.output },\n        tapLeafScript: [\n            tapLeafScript\n        ]\n    });\n    psbt.addOutput({\n        address: p2pktr_addr,\n        value: 1\n    });\n    psbt.signInput(0, hash_lock_keypair);\n    // We have to construct our witness script in a custom finalizer\n    const customFinalizer = (_inputIndex, input) => {\n        const scriptSolution = [\n            input.tapScriptSig[0].signature,\n        ];\n        const witness = scriptSolution\n            .concat(tapLeafScript.script)\n            .concat(tapLeafScript.controlBlock);\n        return {\n            finalScriptWitness: witnessStackToScriptWitness(witness)\n        };\n    };\n    psbt.finalizeInput(0, customFinalizer);\n    const tx = psbt.extractTransaction();\n    return tx.virtualSize();\n}\nfunction getCommitVirtualSize(p2pk_p2tr, keypair, script_addr, tweakedSigner, utxos, numberUTXO, revealVByte, fee_rate) {\n    //select output\n    let inputValue = BNZero;\n    const useUTXO = [];\n    for (let i = 0; i < numberUTXO; i++) {\n        inputValue = inputValue.plus(utxos[i].value);\n        useUTXO.push(utxos[i]);\n    }\n    const p2pk_psbt = new Psbt({ network: Network });\n    p2pk_psbt.addOutput({\n        address: script_addr,\n        value: inputValue.minus(1).toNumber(),\n    });\n    p2pk_psbt.addOutput({\n        address: script_addr,\n        value: 1\n    });\n    for (let i = 0; i < useUTXO.length; i++) {\n        p2pk_psbt.addInput({\n            hash: useUTXO[i].tx_hash,\n            index: useUTXO[i].tx_output_n,\n            witnessUtxo: { value: useUTXO[i].value.toNumber(), script: p2pk_p2tr.output },\n            tapInternalKey: toXOnly(keypair.publicKey)\n        });\n    }\n    for (let i = 0; i < useUTXO.length; i++) {\n        p2pk_psbt.signInput(i, tweakedSigner);\n    }\n    p2pk_psbt.finalizeAllInputs();\n    const commitTX = p2pk_psbt.extractTransaction();\n    return commitTX.virtualSize();\n}\n/**\n* createInscribeTx creates commit and reveal tx to inscribe data on Bitcoin netword.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the inscriber\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param tcTxID TC txID need to be inscribed\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @returns the hex commit transaction\n* @returns the commit transaction id\n* @returns the hex reveal transaction\n* @returns the reveal transaction id\n* @returns the total network fee\n*/\nconst createInscribeTx = async ({ senderPrivateKey, utxos, inscriptions, tcTxIDs, feeRatePerByte, tcClient, }) => {\n    const { keyPair, p2pktr, senderAddress } = generateTaprootKeyPair(senderPrivateKey);\n    const internalPubKey = toXOnly(keyPair.publicKey);\n    // create lock script for commit tx\n    const { hashLockKeyPair, hashLockRedeem, script_p2tr } = await createLockScript({\n        internalPubKey,\n        tcTxIDs,\n        tcClient\n    });\n    // estimate fee and select UTXOs\n    const estCommitTxFee = estimateTxFee(1, 2, feeRatePerByte);\n    const revealVByte = getRevealVirtualSize(hashLockRedeem, script_p2tr, senderAddress, hashLockKeyPair);\n    const estRevealTxFee = revealVByte * feeRatePerByte;\n    const totalFee = estCommitTxFee + estRevealTxFee;\n    // const totalAmount = new BigNumber(totalFee + MinSats); // MinSats for new output in the reveal tx\n    // const { selectedUTXOs, totalInputAmount } = selectCardinalUTXOs(utxos, inscriptions, totalAmount);\n    if (script_p2tr.address === undefined || script_p2tr.address === \"\") {\n        throw new SDKError(ERROR_CODE.INVALID_TAPSCRIPT_ADDRESS, \"\");\n    }\n    const { txHex: commitTxHex, txID: commitTxID, fee: commitTxFee, changeAmount, selectedUTXOs, tx } = createTxSendBTC({\n        senderPrivateKey,\n        utxos,\n        inscriptions,\n        paymentInfos: [{ address: script_p2tr.address || \"\", amount: new BigNumber(estRevealTxFee + MinSats) }],\n        feeRatePerByte,\n    });\n    console.log(\"commitTX: \", tx);\n    console.log(\"COMMITTX selectedUTXOs: \", selectedUTXOs);\n    // create and sign reveal tx\n    const { revealTxHex, revealTxID } = createRawRevealTx({\n        internalPubKey,\n        commitTxID,\n        hashLockKeyPair,\n        hashLockRedeem,\n        script_p2tr,\n        revealTxFee: estRevealTxFee,\n    });\n    console.log(\"commitTxHex: \", commitTxHex);\n    console.log(\"revealTxHex: \", revealTxHex);\n    const { btcTxID } = await tcClient.submitInscribeTx([commitTxHex, revealTxHex]);\n    console.log(\"btcTxID: \", btcTxID);\n    return {\n        commitTxHex,\n        commitTxID,\n        revealTxHex,\n        revealTxID,\n        totalFee: new BigNumber(totalFee),\n    };\n};\n/**\n* createInscribeTx creates commit and reveal tx to inscribe data on Bitcoin netword.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the inscriber\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param tcTxID TC txID need to be inscribed\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @returns the hex commit transaction\n* @returns the commit transaction id\n* @returns the hex reveal transaction\n* @returns the reveal transaction id\n* @returns the total network fee\n*/\nconst createBatchInscribeTxs = async ({ senderPrivateKey, utxos, inscriptions, tcTxDetails, feeRatePerByte, tcClient, }) => {\n    // sort tc tx by inscreasing nonce\n    tcTxDetails = tcTxDetails.sort((a, b) => {\n        if (a.Nonce > b.Nonce) {\n            return 1;\n        }\n        if (a.Nonce < b.Nonce) {\n            return -1;\n        }\n        return 0;\n    });\n    console.log(\"tcTxDetails after sort: \", tcTxDetails);\n    // create inscribe tx \n    if (tcTxDetails.length === 0) {\n        console.log(\"There is no transaction to inscribe\");\n        return [];\n    }\n    const inscribeableTxIDs = [tcTxDetails[0].Hash];\n    let prevNonce = tcTxDetails[0].Nonce;\n    for (let i = 1; i < tcTxDetails.length; i++) {\n        if (prevNonce + 1 === tcTxDetails[i].Nonce) {\n            inscribeableTxIDs.push(tcTxDetails[i].Hash);\n            prevNonce = tcTxDetails[i].Nonce;\n        }\n        else {\n            break;\n        }\n    }\n    console.log(\"inscribeableTxIDs: \", inscribeableTxIDs);\n    const { commitTxHex, commitTxID, revealTxHex, revealTxID, totalFee } = await createInscribeTx({\n        senderPrivateKey,\n        utxos,\n        inscriptions,\n        tcTxIDs: inscribeableTxIDs,\n        feeRatePerByte,\n        tcClient,\n    });\n    return [{\n            tcTxIDs: inscribeableTxIDs,\n            commitTxHex,\n            commitTxID,\n            revealTxHex,\n            revealTxID,\n            totalFee,\n        }];\n};\n/**\n* createInscribeTx creates commit and reveal tx to inscribe data on Bitcoin netword.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the inscriber\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param data list of hex data need to inscribe\n* @param reImbursementTCAddress TC address of the inscriber to receive gas.\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @returns the hex commit transaction\n* @returns the commit transaction id\n* @returns the hex reveal transaction\n* @returns the reveal transaction id\n* @returns the total network fee\n*/\nconst createInscribeTxFromAnyWallet = async ({ pubKey, utxos, inscriptions, tcTxIDs, feeRatePerByte, tcClient, cancelFn }) => {\n    // const { keyPair, p2pktr, senderAddress } = generateTaprootKeyPair(senderPrivateKey);\n    // const internalPubKey = toXOnly(keyPair.publicKey);\n    const { address: senderAddress } = generateTaprootAddressFromPubKey(pubKey);\n    // create lock script for commit tx\n    const { hashLockKeyPair, hashLockRedeem, script_p2tr } = await createLockScript({\n        internalPubKey: pubKey,\n        tcTxIDs,\n        tcClient,\n    });\n    // estimate fee and select UTXOs\n    const estCommitTxFee = estimateTxFee(1, 2, feeRatePerByte);\n    const revealVByte = getRevealVirtualSize(hashLockRedeem, script_p2tr, senderAddress, hashLockKeyPair);\n    const estRevealTxFee = revealVByte * feeRatePerByte;\n    const totalFee = estCommitTxFee + estRevealTxFee;\n    // const totalAmount = new BigNumber(totalFee + MinSats); // MinSats for new output in the reveal tx\n    // const { selectedUTXOs, totalInputAmount } = selectCardinalUTXOs(utxos, inscriptions, totalAmount);\n    if (script_p2tr.address === undefined || script_p2tr.address === \"\") {\n        throw new SDKError(ERROR_CODE.INVALID_TAPSCRIPT_ADDRESS, \"\");\n    }\n    const { base64Psbt: commitPsbtB64, fee: commitTxFee, changeAmount, selectedUTXOs, indicesToSign } = createRawTxSendBTC({\n        pubKey,\n        utxos,\n        inscriptions,\n        paymentInfos: [{ address: script_p2tr.address || \"\", amount: new BigNumber(estRevealTxFee + MinSats) }],\n        feeRatePerByte,\n    });\n    // sign transaction \n    const { msgTx: commitTx, msgTxID: commitTxID, msgTxHex: commitTxHex } = await handleSignPsbtWithSpecificWallet({\n        base64Psbt: commitPsbtB64,\n        indicesToSign: indicesToSign,\n        address: senderAddress,\n        isGetMsgTx: true,\n        cancelFn\n    });\n    console.log(\"commitTX: \", commitTx);\n    console.log(\"COMMITTX selectedUTXOs: \", selectedUTXOs);\n    // create and sign reveal tx\n    const { revealTxHex, revealTxID } = createRawRevealTx({\n        internalPubKey: pubKey,\n        commitTxID,\n        hashLockKeyPair,\n        hashLockRedeem,\n        script_p2tr,\n        revealTxFee: estRevealTxFee,\n    });\n    return {\n        commitTxHex,\n        commitTxID,\n        revealTxHex,\n        revealTxID,\n        totalFee: new BigNumber(totalFee),\n    };\n};\nconst createLockScript = async ({ internalPubKey, tcTxIDs, tcClient, }) => {\n    // Create a tap tree with two spend paths\n    // One path should allow spending using secret\n    // The other path should pay to another pubkey\n    // Make random key pair for hash_lock script\n    const hashLockKeyPair = ECPair.makeRandom({ network: Network });\n    // call TC node to get Tapscript and hash lock redeem\n    const { hashLockScriptHex } = await tcClient.getTapScriptInfo(hashLockKeyPair.publicKey.toString(\"hex\"), tcTxIDs);\n    const hashLockScript = Buffer.from(hashLockScriptHex, \"hex\");\n    const hashLockRedeem = {\n        output: hashLockScript,\n        redeemVersion: 192,\n    };\n    const scriptTree = hashLockRedeem;\n    const script_p2tr = payments.p2tr({\n        internalPubkey: internalPubKey,\n        scriptTree,\n        redeem: hashLockRedeem,\n        network: Network\n    });\n    return {\n        hashLockKeyPair,\n        hashLockScript,\n        hashLockRedeem,\n        script_p2tr\n    };\n};\nconst getRevealVirtualSizeByDataSize = (dataSize) => {\n    const inputSize = InputSize + dataSize;\n    return inputSize + OutputSize;\n};\n/**\n* estimateInscribeFee estimate BTC amount need to inscribe for creating project.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param tcTxSizeByte size of tc tx (in byte)\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @returns the total BTC fee\n*/\nconst estimateInscribeFee = ({ tcTxSizeByte, feeRatePerByte, }) => {\n    const estCommitTxFee = estimateTxFee(2, 2, feeRatePerByte);\n    const revealVByte = getRevealVirtualSizeByDataSize(tcTxSizeByte / 4);\n    const estRevealTxFee = revealVByte * feeRatePerByte;\n    const totalFee = estCommitTxFee + estRevealTxFee;\n    return { totalFee: new BigNumber(totalFee) };\n};\n/**\n* estimateInscribeFee estimate BTC amount need to inscribe for creating project.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param tcTxSizeByte size of tc tx (in byte)\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @returns the total BTC fee\n*/\nconst aggregateUTXOs = async ({ tcAddress, btcAddress, utxos, tcClient, }) => {\n    var _a;\n    const txs = await tcClient.getPendingInscribeTxs(tcAddress);\n    const pendingUTXOs = [];\n    for (const tx of txs) {\n        for (const vin of tx.Vin) {\n            pendingUTXOs.push({\n                tx_hash: vin.txid,\n                tx_output_n: vin.vout,\n                value: BNZero\n            });\n        }\n    }\n    console.log(\"pendingUTXOs: \", pendingUTXOs);\n    const newUTXOs = [];\n    for (const tx of txs) {\n        const btcTxID = tx.BTCHash;\n        for (let i = 0; i < tx.Vout.length; i++) {\n            const vout = tx.Vout[i];\n            try {\n                const receiverAddress = address.fromOutputScript(Buffer.from((_a = vout.scriptPubKey) === null || _a === void 0 ? void 0 : _a.hex, \"hex\"), Network);\n                if (receiverAddress === btcAddress) {\n                    newUTXOs.push({\n                        tx_hash: btcTxID,\n                        tx_output_n: i,\n                        value: new BigNumber(toSat(vout.value))\n                    });\n                }\n            }\n            catch (e) {\n                continue;\n            }\n        }\n    }\n    console.log(\"newUTXOs: \", newUTXOs);\n    const tmpUTXOs = [...utxos, ...newUTXOs];\n    console.log(\"tmpUTXOs: \", tmpUTXOs);\n    const ids = [];\n    const tmpUniqUTXOs = [];\n    for (const utxo of tmpUTXOs) {\n        const id = utxo.tx_hash + \":\" + utxo.tx_output_n;\n        console.log(\"id: \", id);\n        if (ids.findIndex((idTmp) => idTmp === id) !== -1) {\n            continue;\n        }\n        else {\n            tmpUniqUTXOs.push(utxo);\n            ids.push(id);\n        }\n    }\n    console.log(\"tmpUniqUTXOs \", tmpUniqUTXOs);\n    const result = [];\n    for (const utxo of tmpUniqUTXOs) {\n        const foundIndex = pendingUTXOs.findIndex((pendingUTXO) => {\n            return pendingUTXO.tx_hash === utxo.tx_hash && pendingUTXO.tx_output_n === utxo.tx_output_n;\n        });\n        if (foundIndex === -1) {\n            result.push(utxo);\n        }\n    }\n    console.log(\"result: \", result);\n    return result;\n};\nexport { createRawRevealTx, createInscribeTx, createInscribeTxFromAnyWallet, estimateInscribeFee, createLockScript, createBatchInscribeTxs, aggregateUTXOs };\n//# sourceMappingURL=inscribe.js.map","import BigNumber from \"bignumber.js\";\nconst increaseGasPrice = (wei) => {\n    const res = wei.plus(new BigNumber(1000000000));\n    return res;\n};\nexport { increaseGasPrice, };\n//# sourceMappingURL=utils.js.map","import { BNZero } from \"../bitcoin\";\nimport { ERROR_CODE } from \"../constants/error\";\nimport axios from \"axios\";\nimport BigNumber from \"bignumber.js\";\nimport SDKError from \"../constants/error\";\nimport { increaseGasPrice } from \"./utils\";\nconst Mainnet = \"mainnet\";\nconst Testnet = \"testnet\";\nconst Regtest = \"regtest\";\nconst SupportedTCNetworkType = [Mainnet, Testnet, Regtest];\nconst DefaultEndpointTCNodeTestnet = \"http://139.162.54.236:22225\";\nconst DefaultEndpointTCNodeMainnet = \"https://tc-node.trustless.computer\";\nconst DefaultEndpointTCNodeRegtest = \"\";\nconst MethodGet = \"GET\";\nconst MethodPost = \"POST\";\nclass TcClient {\n    constructor(...params) {\n        this.url = DefaultEndpointTCNodeMainnet;\n        this.network = Mainnet;\n        this.callRequest = async (payload, methodType, method) => {\n            // JSONRPCClient needs to know how to send a JSON-RPC request.\n            // Tell it by passing a function to its constructor. The function must take a JSON-RPC request and send it.\n            const client = new axios.Axios({\n                baseURL: this.url\n            });\n            const dataReq = {\n                jsonrpc: \"2.0\",\n                id: +new Date(),\n                method: method,\n                params: payload,\n            };\n            console.log(\"Data req: \", dataReq);\n            const response = await client.post(\"\", JSON.stringify(dataReq), {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n            });\n            const { status, data } = response;\n            console.log(\"data from response: \", data);\n            if (status !== 200) {\n                throw new SDKError(ERROR_CODE.RPC_ERROR, data);\n            }\n            const dataResp = JSON.parse(data);\n            console.log(\"Data resp: \", dataResp);\n            if (dataResp.error || !dataResp.result) {\n                throw new SDKError(ERROR_CODE.RPC_ERROR, data.error);\n            }\n            return dataResp.result;\n        };\n        // call to tc node to get inscribeable nonce and gas price (if need to replace previous orphan tx(s))\n        this.getNonceInscribeable = async (tcAddress) => {\n            const payload = [tcAddress];\n            const resp = await this.callRequest(payload, MethodPost, \"eth_getInscribableInfo\");\n            console.log(\"Resp getNonceInscribeable: \", resp);\n            if (resp === \"\") {\n                throw new SDKError(ERROR_CODE.RPC_GET_INSCRIBEABLE_INFO_ERROR, \"response is empty\");\n            }\n            const strs = resp.split(\":\");\n            console.log(\"strs: \", strs);\n            if (strs.length !== 2) {\n                throw new SDKError(ERROR_CODE.RPC_GET_INSCRIBEABLE_INFO_ERROR, \"response is invalid\");\n            }\n            const gasPrice = new BigNumber(strs[1]);\n            let gasPriceRes;\n            if (gasPrice.eq(BNZero)) {\n                gasPriceRes = -1;\n            }\n            else {\n                gasPriceRes = increaseGasPrice(gasPrice).toNumber();\n            }\n            return {\n                nonce: Number(strs[0]),\n                gasPrice: gasPriceRes,\n            };\n        };\n        // submitInscribeTx submits btc tx into TC node and then it will broadcast txs to Bitcoin fullnode\n        this.submitInscribeTx = async (btcTxHex) => {\n            const payload = [btcTxHex];\n            const resp = await this.callRequest(payload, MethodPost, \"eth_submitBitcoinTx\");\n            console.log(\"Resp eth_submitBitcoinTx: \", resp);\n            if (resp === \"\") {\n                throw new SDKError(ERROR_CODE.RPC_GET_INSCRIBEABLE_INFO_ERROR, \"response is empty\");\n            }\n            return {\n                btcTxID: resp,\n            };\n        };\n        // submitInscribeTx submits btc tx into TC node and then it will broadcast txs to Bitcoin fullnode\n        this.getTapScriptInfo = async (hashLockPubKey, tcTxIDs) => {\n            const payload = [hashLockPubKey, tcTxIDs];\n            const resp = await this.callRequest(payload, MethodPost, \"eth_getHashLockScript\");\n            console.log(\"Resp eth_getHashLockScript: \", resp);\n            if (resp === \"\") {\n                throw new SDKError(ERROR_CODE.RPC_GET_TAPSCRIPT_INFO, \"response is empty\");\n            }\n            return {\n                hashLockScriptHex: resp,\n            };\n        };\n        // submitInscribeTx submits btc tx into TC node and then it will broadcast txs to Bitcoin fullnode\n        this.getUnInscribedTransactionByAddress = async (tcAddress) => {\n            const payload = [tcAddress];\n            const resp = await this.callRequest(payload, MethodPost, \"eth_getUnInscribedTransactionByAddress\");\n            console.log(\"Resp eth_getUnInscribedTransactionByAddress: \", resp);\n            if (resp === \"\") {\n                throw new SDKError(ERROR_CODE.RPC_GET_TAPSCRIPT_INFO, \"response is empty\");\n            }\n            return {\n                unInscribedTxIDs: resp,\n            };\n        };\n        this.getUnInscribedTransactionDetailByAddress = async (tcAddress) => {\n            const payload = [tcAddress];\n            const resp = await this.callRequest(payload, MethodPost, \"eth_getUnInscribedTransactionDetailByAddress\");\n            console.log(\"Resp getUnInscribedTransactionDetailByAddress: \", resp);\n            if (resp === \"\") {\n                throw new SDKError(ERROR_CODE.RPC_GET_TAPSCRIPT_INFO, \"response is empty\");\n            }\n            const txDetails = [];\n            console.log(\"resp: \", resp);\n            for (const tx of resp) {\n                txDetails.push({\n                    Nonce: tx.Nonce,\n                    GasPrice: tx.GasPrice,\n                    Gas: tx.Gas,\n                    To: tx.To,\n                    Value: tx.Value,\n                    Input: tx.Input,\n                    V: tx.V,\n                    R: new BigNumber(tx.R),\n                    S: new BigNumber(tx.S),\n                    Hash: tx.Hash,\n                    From: tx.From,\n                    Type: tx.Type,\n                });\n            }\n            return {\n                unInscribedTxDetails: txDetails,\n            };\n        };\n        // getTCTxByHash get TC tx \n        this.getTCTxByHash = async (tcTxID) => {\n            const payload = [tcTxID];\n            const resp = await this.callRequest(payload, MethodPost, \"eth_getTransactionByHash\");\n            console.log(\"Resp eth_getTransactionByHash: \", resp);\n            if (resp === \"\") {\n                throw new SDKError(ERROR_CODE.RPC_GET_TAPSCRIPT_INFO, \"response is empty\");\n            }\n            if (resp.blockHash !== \"\") {\n                const receipt = await this.getTCTxReceipt(tcTxID);\n                resp.status = receipt.status;\n            }\n            return resp;\n        };\n        // getTCTxReceipt get TC tx receipt\n        this.getTCTxReceipt = async (tcTxID) => {\n            const payload = [tcTxID];\n            const resp = await this.callRequest(payload, MethodPost, \"eth_getTransactionReceipt\");\n            console.log(\"Resp eth_getTransactionByHash: \", resp);\n            if (resp === \"\") {\n                throw new SDKError(ERROR_CODE.RPC_GET_TAPSCRIPT_INFO, \"response is empty\");\n            }\n            return resp;\n        };\n        // getPendingInscribeTxs returns pending BTC inscribe txs in TC node (both broadcasted and holding)\n        this.getPendingInscribeTxs = async (tcAddress) => {\n            const payload = [tcAddress];\n            const resp = await this.callRequest(payload, MethodPost, \"eth_getPendingInscribedUTXOByAddress\");\n            console.log(\"Resp eth_getPendingInscribedUTXOByAddress: \", resp);\n            if (resp === \"\") {\n                throw new SDKError(ERROR_CODE.RPC_GET_TAPSCRIPT_INFO, \"response is empty\");\n            }\n            const btcTx = [];\n            for (const info of resp) {\n                btcTx.push(info.Commit);\n                btcTx.push(info.Reveal);\n            }\n            return btcTx;\n        };\n        if (params.length === 0) {\n            throw new SDKError(ERROR_CODE.INVALID_PARAMS);\n        }\n        // check network type\n        if (!SupportedTCNetworkType.includes(params[0])) {\n            throw new SDKError(ERROR_CODE.INVALID_NETWORK_TYPE);\n        }\n        this.network = params[0];\n        if (params.length === 2) {\n            this.url = params[1];\n            return this;\n        }\n        else if (params.length === 1) {\n            switch (this.network) {\n                case Mainnet: {\n                    this.url = DefaultEndpointTCNodeMainnet;\n                    return this;\n                }\n                case Testnet: {\n                    this.url = DefaultEndpointTCNodeTestnet;\n                    return this;\n                }\n                case Regtest: {\n                    this.url = DefaultEndpointTCNodeRegtest;\n                    return this;\n                }\n            }\n        }\n    }\n}\nexport { TcClient, Mainnet, Testnet, Regtest, };\n//# sourceMappingURL=tcclient.js.map"],"names":["Network","networks","initEccLib","ecc","ECPairFactory","BIP32Factory","wif","crypto","payments","ethers","hdkey","Web3","keccak256","utils","AES","enc","Transaction","Psbt","signTransaction","axios","verifySchnorr","varuint","address"],"mappings":"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"}